/*
 * SoundCloud Public API Specification
 * Discover and play over 320 million music tracks. Join the world’s largest online community of artists, bands, DJs, and audio creators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.Users;
import com.konfigthis.client.model.WebProfilesInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private static UsersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UsersApi(apiClient);
    }

    /**
     * Returns a list of user’s followers.
     *
     * Returns a list of users that follows (user_id).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFollowersTest() throws ApiException {
        Integer userId = null;
        Integer limit = null;
        Users response = api.getFollowers(userId)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a user&#39;s following. (use /users/{user_id} instead, to fetch the user details)
     *
     * Returns (following_id) that is followed by (user_id).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFollowingByIdTest() throws ApiException {
        Integer userId = null;
        Integer followingId = null;
        User response = api.getFollowingById(userId, followingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        Integer userId = null;
        User response = api.getUser(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of user’s followings.
     *
     * Returns list of users that (user_id) follows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserFollowingsTest() throws ApiException {
        Integer userId = null;
        Integer limit = null;
        Users response = api.getUserFollowings(userId)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of user&#39;s playlists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPlaylistsTest() throws ApiException {
        Integer userId = null;
        List<String> access = null;
        Boolean showTracks = null;
        Integer limit = null;
        Boolean linkedPartitioning = null;
        Object response = api.getUserPlaylists(userId)
                .access(access)
                .showTracks(showTracks)
                .limit(limit)
                .linkedPartitioning(linkedPartitioning)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of user&#39;s tracks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTracksTest() throws ApiException {
        Integer userId = null;
        List<String> access = null;
        Integer limit = null;
        Boolean linkedPartitioning = null;
        Object response = api.getUserTracks(userId)
                .access(access)
                .limit(limit)
                .linkedPartitioning(linkedPartitioning)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns list of user&#39;s links added to their profile (website, facebook, instagram).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserWebProfilesTest() throws ApiException {
        Integer userId = null;
        Integer limit = null;
        List<WebProfilesInner> response = api.getUserWebProfiles(userId)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of user&#39;s favorited or liked tracks. (use /users/:userId/likes/tracks instead, to fetch a user&#39;s likes)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFavoritesTest() throws ApiException {
        Integer userId = null;
        Integer limit = null;
        Boolean linkedPartitioning = null;
        Object response = api.listFavorites(userId)
                .limit(limit)
                .linkedPartitioning(linkedPartitioning)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of user&#39;s liked playlists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLikedPlaylistsTest() throws ApiException {
        Integer userId = null;
        Integer limit = null;
        Boolean linkedPartitioning = null;
        Object response = api.listLikedPlaylists(userId)
                .limit(limit)
                .linkedPartitioning(linkedPartitioning)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of user&#39;s liked tracks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLikedTracksTest() throws ApiException {
        Integer userId = null;
        List<String> access = null;
        Integer limit = null;
        Boolean linkedPartitioning = null;
        Object response = api.listLikedTracks(userId)
                .access(access)
                .limit(limit)
                .linkedPartitioning(linkedPartitioning)
                .execute();
        // TODO: test validations
    }

}
