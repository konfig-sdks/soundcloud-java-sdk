/*
 * SoundCloud Public API Specification
 * Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Comment;
import com.konfigthis.client.model.Comments;
import java.io.File;
import com.konfigthis.client.model.Streams;
import com.konfigthis.client.model.Track;
import com.konfigthis.client.model.TrackDataRequest;
import com.konfigthis.client.model.TrackMetadataRequest;
import com.konfigthis.client.model.TrackMetadataRequestTrack;
import com.konfigthis.client.model.TracksCreateCommentRequest;
import com.konfigthis.client.model.TracksCreateCommentRequestComment;
import com.konfigthis.client.model.TracksUploadNewTrackRequest;
import com.konfigthis.client.model.TracksUploadNewTrackRequest1;
import com.konfigthis.client.model.Users;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TracksApi
 */
@Disabled
public class TracksApiTest {

    private static TracksApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TracksApi(apiClient);
    }

    /**
     * Returns the newly created comment on success
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCommentTest() throws ApiException {
        Integer trackId = null;
        TracksCreateCommentRequestComment comment = null;
        Comment response = api.createComment(trackId)
                .comment(comment)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes a track.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrackTest() throws ApiException {
        Integer trackId = null;
        api.deleteTrack(trackId)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a track.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        Integer trackId = null;
        String secretToken = null;
        Track response = api.getById(trackId)
                .secretToken(secretToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the comments posted on the track(track_id).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentsTest() throws ApiException {
        Integer trackId = null;
        Integer limit = null;
        Integer offset = null;
        Boolean linkedPartitioning = null;
        Comments response = api.getComments(trackId)
                .limit(limit)
                .offset(offset)
                .linkedPartitioning(linkedPartitioning)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of users who have favorited or liked the track.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFavoritersTest() throws ApiException {
        Integer trackId = null;
        Integer limit = null;
        Boolean linkedPartitioning = null;
        Users response = api.getFavoriters(trackId)
                .limit(limit)
                .linkedPartitioning(linkedPartitioning)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns all related tracks of track on SoundCloud.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelatedTracksTest() throws ApiException {
        Integer trackId = null;
        List<String> access = null;
        Integer limit = null;
        Integer offset = null;
        Boolean linkedPartitioning = null;
        Object response = api.getRelatedTracks(trackId)
                .access(access)
                .limit(limit)
                .offset(offset)
                .linkedPartitioning(linkedPartitioning)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a track&#39;s streamable URLs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStreamableUrlsTest() throws ApiException {
        Integer trackId = null;
        String secretToken = null;
        Streams response = api.getStreamableUrls(trackId)
                .secretToken(secretToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a collection of track&#39;s reposters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRepostersTest() throws ApiException {
        Integer trackId = null;
        Integer limit = null;
        Users response = api.listReposters(trackId)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates a track&#39;s information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTrackInformationTest() throws ApiException {
        Integer trackId = null;
        TrackMetadataRequestTrack track = null;
        Track response = api.updateTrackInformation(trackId)
                .track(track)
                .execute();
        // TODO: test validations
    }

    /**
     * Uploads a new track.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadNewTrackTest() throws ApiException {
        String trackTitle = null;
        File trackAssetData = null;
        String trackPermalink = null;
        String trackSharing = null;
        String trackEmbeddableBy = null;
        String trackPurchaseUrl = null;
        String trackDescription = null;
        String trackGenre = null;
        String trackTagList = null;
        String trackLabelName = null;
        String trackRelease = null;
        String trackReleaseDate = null;
        Boolean trackStreamable = null;
        Boolean trackDownloadable = null;
        String trackLicense = null;
        Boolean trackCommentable = null;
        String trackIsrc = null;
        File trackArtworkData = null;
        Track response = api.uploadNewTrack()
                .trackTitle(trackTitle)
                .trackAssetData(trackAssetData)
                .trackPermalink(trackPermalink)
                .trackSharing(trackSharing)
                .trackEmbeddableBy(trackEmbeddableBy)
                .trackPurchaseUrl(trackPurchaseUrl)
                .trackDescription(trackDescription)
                .trackGenre(trackGenre)
                .trackTagList(trackTagList)
                .trackLabelName(trackLabelName)
                .trackRelease(trackRelease)
                .trackReleaseDate(trackReleaseDate)
                .trackStreamable(trackStreamable)
                .trackDownloadable(trackDownloadable)
                .trackLicense(trackLicense)
                .trackCommentable(trackCommentable)
                .trackIsrc(trackIsrc)
                .trackArtworkData(trackArtworkData)
                .execute();
        // TODO: test validations
    }

}
