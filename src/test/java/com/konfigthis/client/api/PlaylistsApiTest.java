/*
 * SoundCloud Public API Specification
 * Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateUpdatePlaylistRequest;
import com.konfigthis.client.model.CreateUpdatePlaylistRequestPlaylist;
import com.konfigthis.client.model.Playlist;
import com.konfigthis.client.model.PlaylistsCreateNewPlaylistRequest;
import com.konfigthis.client.model.Users;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlaylistsApi
 */
@Disabled
public class PlaylistsApiTest {

    private static PlaylistsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PlaylistsApi(apiClient);
    }

    /**
     * Creates a playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewPlaylistTest() throws ApiException {
        CreateUpdatePlaylistRequestPlaylist playlist = null;
        Playlist response = api.createNewPlaylist()
                .playlist(playlist)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes a playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePlaylistTest() throws ApiException {
        Integer playlistId = null;
        api.deletePlaylist(playlistId)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlaylistByIdTest() throws ApiException {
        Integer playlistId = null;
        String secretToken = null;
        List<String> access = null;
        Boolean showTracks = null;
        Playlist response = api.getPlaylistById(playlistId)
                .secretToken(secretToken)
                .access(access)
                .showTracks(showTracks)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns tracks under a playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTracksTest() throws ApiException {
        Integer playlistId = null;
        String secretToken = null;
        List<String> access = null;
        Boolean linkedPartitioning = null;
        Object response = api.getTracks(playlistId)
                .secretToken(secretToken)
                .access(access)
                .linkedPartitioning(linkedPartitioning)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a collection of playlist&#39;s reposters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRepostersTest() throws ApiException {
        Integer playlistId = null;
        Integer limit = null;
        Users response = api.listReposters(playlistId)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates a playlist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePlaylistByIdTest() throws ApiException {
        Integer playlistId = null;
        CreateUpdatePlaylistRequestPlaylist playlist = null;
        Playlist response = api.updatePlaylistById(playlistId)
                .playlist(playlist)
                .execute();
        // TODO: test validations
    }

}
