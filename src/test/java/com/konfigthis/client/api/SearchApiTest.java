/*
 * SoundCloud Public API Specification
 * Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.SearchByQueryBpmParameter;
import com.konfigthis.client.model.SearchByQueryCreatedAtParameter;
import com.konfigthis.client.model.SearchByQueryDurationParameter;
import com.konfigthis.client.model.Users;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SearchApi
 */
@Disabled
public class SearchApiTest {

    private static SearchApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SearchApi(apiClient);
    }

    /**
     * Performs a track search based on a query
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void byQueryTest() throws ApiException {
        String q = null;
        String ids = null;
        String genres = null;
        String tags = null;
        SearchByQueryBpmParameter bpm = null;
        SearchByQueryDurationParameter duration = null;
        SearchByQueryCreatedAtParameter createdAt = null;
        List<String> access = null;
        Integer limit = null;
        Integer offset = null;
        Boolean linkedPartitioning = null;
        Object response = api.byQuery()
                .q(q)
                .ids(ids)
                .genres(genres)
                .tags(tags)
                .bpm(bpm)
                .duration(duration)
                .createdAt(createdAt)
                .access(access)
                .limit(limit)
                .offset(offset)
                .linkedPartitioning(linkedPartitioning)
                .execute();
        // TODO: test validations
    }

    /**
     * Performs a playlist search based on a query
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void byQuery_0Test() throws ApiException {
        String q = null;
        List<String> access = null;
        Boolean showTracks = null;
        Integer limit = null;
        Integer offset = null;
        Boolean linkedPartitioning = null;
        Object response = api.byQuery_0()
                .q(q)
                .access(access)
                .showTracks(showTracks)
                .limit(limit)
                .offset(offset)
                .linkedPartitioning(linkedPartitioning)
                .execute();
        // TODO: test validations
    }

    /**
     * Performs a user search based on a query
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userQueryTest() throws ApiException {
        String q = null;
        String ids = null;
        Integer limit = null;
        Integer offset = null;
        Boolean linkedPartitioning = null;
        Users response = api.userQuery()
                .q(q)
                .ids(ids)
                .limit(limit)
                .offset(offset)
                .linkedPartitioning(linkedPartitioning)
                .execute();
        // TODO: test validations
    }

}
