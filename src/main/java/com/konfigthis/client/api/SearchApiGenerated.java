/*
 * SoundCloud Public API Specification
 * Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.SearchByQueryBpmParameter;
import com.konfigthis.client.model.SearchByQueryCreatedAtParameter;
import com.konfigthis.client.model.SearchByQueryDurationParameter;
import com.konfigthis.client.model.Users;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SearchApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call byQueryCall(String q, String ids, String genres, String tags, SearchByQueryBpmParameter bpm, SearchByQueryDurationParameter duration, SearchByQueryCreatedAtParameter createdAt, List<String> access, Integer limit, Integer offset, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (genres != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("genres", genres));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (bpm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bpm", bpm));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        if (createdAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at", createdAt));
        }

        if (access != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "access", access));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (linkedPartitioning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_partitioning", linkedPartitioning));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call byQueryValidateBeforeCall(String q, String ids, String genres, String tags, SearchByQueryBpmParameter bpm, SearchByQueryDurationParameter duration, SearchByQueryCreatedAtParameter createdAt, List<String> access, Integer limit, Integer offset, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        return byQueryCall(q, ids, genres, tags, bpm, duration, createdAt, access, limit, offset, linkedPartitioning, _callback);

    }


    private ApiResponse<Object> byQueryWithHttpInfo(String q, String ids, String genres, String tags, SearchByQueryBpmParameter bpm, SearchByQueryDurationParameter duration, SearchByQueryCreatedAtParameter createdAt, List<String> access, Integer limit, Integer offset, Boolean linkedPartitioning) throws ApiException {
        okhttp3.Call localVarCall = byQueryValidateBeforeCall(q, ids, genres, tags, bpm, duration, createdAt, access, limit, offset, linkedPartitioning, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call byQueryAsync(String q, String ids, String genres, String tags, SearchByQueryBpmParameter bpm, SearchByQueryDurationParameter duration, SearchByQueryCreatedAtParameter createdAt, List<String> access, Integer limit, Integer offset, Boolean linkedPartitioning, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = byQueryValidateBeforeCall(q, ids, genres, tags, bpm, duration, createdAt, access, limit, offset, linkedPartitioning, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ByQueryRequestBuilder {
        private String q;
        private String ids;
        private String genres;
        private String tags;
        private SearchByQueryBpmParameter bpm;
        private SearchByQueryDurationParameter duration;
        private SearchByQueryCreatedAtParameter createdAt;
        private List<String> access;
        private Integer limit;
        private Integer offset;
        private Boolean linkedPartitioning;

        private ByQueryRequestBuilder() {
        }

        /**
         * Set q
         * @param q search (optional)
         * @return ByQueryRequestBuilder
         */
        public ByQueryRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set ids
         * @param ids A comma separated list of track ids to filter on (optional)
         * @return ByQueryRequestBuilder
         */
        public ByQueryRequestBuilder ids(String ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Set genres
         * @param genres A comma separated list of genres (optional)
         * @return ByQueryRequestBuilder
         */
        public ByQueryRequestBuilder genres(String genres) {
            this.genres = genres;
            return this;
        }
        
        /**
         * Set tags
         * @param tags A comma separated list of tags (optional)
         * @return ByQueryRequestBuilder
         */
        public ByQueryRequestBuilder tags(String tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set bpm
         * @param bpm Return tracks with a specified bpm[from], bpm[to] (optional)
         * @return ByQueryRequestBuilder
         */
        public ByQueryRequestBuilder bpm(SearchByQueryBpmParameter bpm) {
            this.bpm = bpm;
            return this;
        }
        
        /**
         * Set duration
         * @param duration Return tracks within a specified duration range (optional)
         * @return ByQueryRequestBuilder
         */
        public ByQueryRequestBuilder duration(SearchByQueryDurationParameter duration) {
            this.duration = duration;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt (yyyy-mm-dd hh:mm:ss) return tracks created within the specified dates (optional)
         * @return ByQueryRequestBuilder
         */
        public ByQueryRequestBuilder createdAt(SearchByQueryCreatedAtParameter createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set access
         * @param access Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you&#39;d like to see all possible tracks. See &#x60;Track#access&#x60; schema for more details.  (optional)
         * @return ByQueryRequestBuilder
         */
        public ByQueryRequestBuilder access(List<String> access) {
            this.access = access;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return ByQueryRequestBuilder
         */
        public ByQueryRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset of first result. Deprecated, use &#x60;linked_partitioning&#x60; instead. (optional, default to 0)
         * @return ByQueryRequestBuilder
         */
        public ByQueryRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set linkedPartitioning
         * @param linkedPartitioning Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used) (optional)
         * @return ByQueryRequestBuilder
         */
        public ByQueryRequestBuilder linkedPartitioning(Boolean linkedPartitioning) {
            this.linkedPartitioning = linkedPartitioning;
            return this;
        }
        
        /**
         * Build call for byQuery
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return byQueryCall(q, ids, genres, tags, bpm, duration, createdAt, access, limit, offset, linkedPartitioning, _callback);
        }


        /**
         * Execute byQuery request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = byQueryWithHttpInfo(q, ids, genres, tags, bpm, duration, createdAt, access, limit, offset, linkedPartitioning);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute byQuery request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return byQueryWithHttpInfo(q, ids, genres, tags, bpm, duration, createdAt, access, limit, offset, linkedPartitioning);
        }

        /**
         * Execute byQuery request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return byQueryAsync(q, ids, genres, tags, bpm, duration, createdAt, access, limit, offset, linkedPartitioning, _callback);
        }
    }

    /**
     * Performs a track search based on a query
     * 
     * @return ByQueryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ByQueryRequestBuilder byQuery() throws IllegalArgumentException {
        return new ByQueryRequestBuilder();
    }
    private okhttp3.Call byQuery_0Call(String q, List<String> access, Boolean showTracks, Integer limit, Integer offset, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (access != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "access", access));
        }

        if (showTracks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_tracks", showTracks));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (linkedPartitioning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_partitioning", linkedPartitioning));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call byQuery_0ValidateBeforeCall(String q, List<String> access, Boolean showTracks, Integer limit, Integer offset, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        return byQuery_0Call(q, access, showTracks, limit, offset, linkedPartitioning, _callback);

    }


    private ApiResponse<Object> byQuery_0WithHttpInfo(String q, List<String> access, Boolean showTracks, Integer limit, Integer offset, Boolean linkedPartitioning) throws ApiException {
        okhttp3.Call localVarCall = byQuery_0ValidateBeforeCall(q, access, showTracks, limit, offset, linkedPartitioning, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call byQuery_0Async(String q, List<String> access, Boolean showTracks, Integer limit, Integer offset, Boolean linkedPartitioning, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = byQuery_0ValidateBeforeCall(q, access, showTracks, limit, offset, linkedPartitioning, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ByQuery0RequestBuilder {
        private String q;
        private List<String> access;
        private Boolean showTracks;
        private Integer limit;
        private Integer offset;
        private Boolean linkedPartitioning;

        private ByQuery0RequestBuilder() {
        }

        /**
         * Set q
         * @param q search (optional)
         * @return ByQuery0RequestBuilder
         */
        public ByQuery0RequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set access
         * @param access Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you&#39;d like to see all possible tracks. See &#x60;Track#access&#x60; schema for more details.  (optional)
         * @return ByQuery0RequestBuilder
         */
        public ByQuery0RequestBuilder access(List<String> access) {
            this.access = access;
            return this;
        }
        
        /**
         * Set showTracks
         * @param showTracks A boolean flag to request a playlist with or without tracks. Default is &#x60;true&#x60;. (optional)
         * @return ByQuery0RequestBuilder
         */
        public ByQuery0RequestBuilder showTracks(Boolean showTracks) {
            this.showTracks = showTracks;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return ByQuery0RequestBuilder
         */
        public ByQuery0RequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset of first result. Deprecated, use &#x60;linked_partitioning&#x60; instead. (optional, default to 0)
         * @return ByQuery0RequestBuilder
         */
        public ByQuery0RequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set linkedPartitioning
         * @param linkedPartitioning Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used) (optional)
         * @return ByQuery0RequestBuilder
         */
        public ByQuery0RequestBuilder linkedPartitioning(Boolean linkedPartitioning) {
            this.linkedPartitioning = linkedPartitioning;
            return this;
        }
        
        /**
         * Build call for byQuery_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return byQuery_0Call(q, access, showTracks, limit, offset, linkedPartitioning, _callback);
        }


        /**
         * Execute byQuery_0 request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = byQuery_0WithHttpInfo(q, access, showTracks, limit, offset, linkedPartitioning);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute byQuery_0 request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return byQuery_0WithHttpInfo(q, access, showTracks, limit, offset, linkedPartitioning);
        }

        /**
         * Execute byQuery_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return byQuery_0Async(q, access, showTracks, limit, offset, linkedPartitioning, _callback);
        }
    }

    /**
     * Performs a playlist search based on a query
     * 
     * @return ByQuery0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ByQuery0RequestBuilder byQuery_0() throws IllegalArgumentException {
        return new ByQuery0RequestBuilder();
    }
    private okhttp3.Call userQueryCall(String q, String ids, Integer limit, Integer offset, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (linkedPartitioning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_partitioning", linkedPartitioning));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userQueryValidateBeforeCall(String q, String ids, Integer limit, Integer offset, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        return userQueryCall(q, ids, limit, offset, linkedPartitioning, _callback);

    }


    private ApiResponse<Users> userQueryWithHttpInfo(String q, String ids, Integer limit, Integer offset, Boolean linkedPartitioning) throws ApiException {
        okhttp3.Call localVarCall = userQueryValidateBeforeCall(q, ids, limit, offset, linkedPartitioning, null);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call userQueryAsync(String q, String ids, Integer limit, Integer offset, Boolean linkedPartitioning, final ApiCallback<Users> _callback) throws ApiException {

        okhttp3.Call localVarCall = userQueryValidateBeforeCall(q, ids, limit, offset, linkedPartitioning, _callback);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UserQueryRequestBuilder {
        private String q;
        private String ids;
        private Integer limit;
        private Integer offset;
        private Boolean linkedPartitioning;

        private UserQueryRequestBuilder() {
        }

        /**
         * Set q
         * @param q search (optional)
         * @return UserQueryRequestBuilder
         */
        public UserQueryRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set ids
         * @param ids A comma separated list of track ids to filter on (optional)
         * @return UserQueryRequestBuilder
         */
        public UserQueryRequestBuilder ids(String ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return UserQueryRequestBuilder
         */
        public UserQueryRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset of first result. Deprecated, use &#x60;linked_partitioning&#x60; instead. (optional, default to 0)
         * @return UserQueryRequestBuilder
         */
        public UserQueryRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set linkedPartitioning
         * @param linkedPartitioning Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used) (optional)
         * @return UserQueryRequestBuilder
         */
        public UserQueryRequestBuilder linkedPartitioning(Boolean linkedPartitioning) {
            this.linkedPartitioning = linkedPartitioning;
            return this;
        }
        
        /**
         * Build call for userQuery
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return userQueryCall(q, ids, limit, offset, linkedPartitioning, _callback);
        }


        /**
         * Execute userQuery request
         * @return Users
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Users execute() throws ApiException {
            ApiResponse<Users> localVarResp = userQueryWithHttpInfo(q, ids, limit, offset, linkedPartitioning);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute userQuery request with HTTP info returned
         * @return ApiResponse&lt;Users&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Users> executeWithHttpInfo() throws ApiException {
            return userQueryWithHttpInfo(q, ids, limit, offset, linkedPartitioning);
        }

        /**
         * Execute userQuery request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Users> _callback) throws ApiException {
            return userQueryAsync(q, ids, limit, offset, linkedPartitioning, _callback);
        }
    }

    /**
     * Performs a user search based on a query
     * 
     * @return UserQueryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UserQueryRequestBuilder userQuery() throws IllegalArgumentException {
        return new UserQueryRequestBuilder();
    }
}
