/*
 * SoundCloud Public API Specification
 * Discover and play over 320 million music tracks. Join the world’s largest online community of artists, bands, DJs, and audio creators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.User;
import com.konfigthis.client.model.Users;
import com.konfigthis.client.model.WebProfilesInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getFollowersCall(Integer userId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/followers"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowersValidateBeforeCall(Integer userId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getFollowers(Async)");
        }

        return getFollowersCall(userId, limit, _callback);

    }


    private ApiResponse<Users> getFollowersWithHttpInfo(Integer userId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getFollowersValidateBeforeCall(userId, limit, null);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFollowersAsync(Integer userId, Integer limit, final ApiCallback<Users> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowersValidateBeforeCall(userId, limit, _callback);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFollowersRequestBuilder {
        private final Integer userId;
        private Integer limit;

        private GetFollowersRequestBuilder(Integer userId) {
            this.userId = userId;
        }

        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return GetFollowersRequestBuilder
         */
        public GetFollowersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getFollowers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFollowersCall(userId, limit, _callback);
        }


        /**
         * Execute getFollowers request
         * @return Users
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Users execute() throws ApiException {
            ApiResponse<Users> localVarResp = getFollowersWithHttpInfo(userId, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFollowers request with HTTP info returned
         * @return ApiResponse&lt;Users&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Users> executeWithHttpInfo() throws ApiException {
            return getFollowersWithHttpInfo(userId, limit);
        }

        /**
         * Execute getFollowers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Users> _callback) throws ApiException {
            return getFollowersAsync(userId, limit, _callback);
        }
    }

    /**
     * Returns a list of user’s followers.
     * Returns a list of users that follows (user_id).
     * @param userId SoundCloud User id (required)
     * @return GetFollowersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFollowersRequestBuilder getFollowers(Integer userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new GetFollowersRequestBuilder(userId);
    }
    private okhttp3.Call getFollowingByIdCall(Integer userId, Integer followingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/followings/{following_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()))
            .replace("{" + "following_id" + "}", localVarApiClient.escapeString(followingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowingByIdValidateBeforeCall(Integer userId, Integer followingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getFollowingById(Async)");
        }

        // verify the required parameter 'followingId' is set
        if (followingId == null) {
            throw new ApiException("Missing the required parameter 'followingId' when calling getFollowingById(Async)");
        }

        return getFollowingByIdCall(userId, followingId, _callback);

    }


    private ApiResponse<User> getFollowingByIdWithHttpInfo(Integer userId, Integer followingId) throws ApiException {
        okhttp3.Call localVarCall = getFollowingByIdValidateBeforeCall(userId, followingId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFollowingByIdAsync(Integer userId, Integer followingId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowingByIdValidateBeforeCall(userId, followingId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFollowingByIdRequestBuilder {
        private final Integer userId;
        private final Integer followingId;

        private GetFollowingByIdRequestBuilder(Integer userId, Integer followingId) {
            this.userId = userId;
            this.followingId = followingId;
        }

        /**
         * Build call for getFollowingById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFollowingByIdCall(userId, followingId, _callback);
        }


        /**
         * Execute getFollowingById request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public User execute() throws ApiException {
            ApiResponse<User> localVarResp = getFollowingByIdWithHttpInfo(userId, followingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFollowingById request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            return getFollowingByIdWithHttpInfo(userId, followingId);
        }

        /**
         * Execute getFollowingById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            return getFollowingByIdAsync(userId, followingId, _callback);
        }
    }

    /**
     * Returns a user&#39;s following. (use /users/{user_id} instead, to fetch the user details)
     * Returns (following_id) that is followed by (user_id).
     * @param userId SoundCloud User id (required)
     * @param followingId SoundCloud User id to denote a Following of a user (required)
     * @return GetFollowingByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetFollowingByIdRequestBuilder getFollowingById(Integer userId, Integer followingId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        if (followingId == null) throw new IllegalArgumentException("\"followingId\" is required but got null");
        return new GetFollowingByIdRequestBuilder(userId, followingId);
    }
    private okhttp3.Call getUserCall(Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUser(Async)");
        }

        return getUserCall(userId, _callback);

    }


    private ApiResponse<User> getUserWithHttpInfo(Integer userId) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserAsync(Integer userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserRequestBuilder {
        private final Integer userId;

        private GetUserRequestBuilder(Integer userId) {
            this.userId = userId;
        }

        /**
         * Build call for getUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserCall(userId, _callback);
        }


        /**
         * Execute getUser request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            ApiResponse<User> localVarResp = getUserWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUser request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            return getUserWithHttpInfo(userId);
        }

        /**
         * Execute getUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            return getUserAsync(userId, _callback);
        }
    }

    /**
     * Returns a user.
     * 
     * @param userId SoundCloud User id (required)
     * @return GetUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetUserRequestBuilder getUser(Integer userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new GetUserRequestBuilder(userId);
    }
    private okhttp3.Call getUserFollowingsCall(Integer userId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/followings"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserFollowingsValidateBeforeCall(Integer userId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserFollowings(Async)");
        }

        return getUserFollowingsCall(userId, limit, _callback);

    }


    private ApiResponse<Users> getUserFollowingsWithHttpInfo(Integer userId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getUserFollowingsValidateBeforeCall(userId, limit, null);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserFollowingsAsync(Integer userId, Integer limit, final ApiCallback<Users> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserFollowingsValidateBeforeCall(userId, limit, _callback);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserFollowingsRequestBuilder {
        private final Integer userId;
        private Integer limit;

        private GetUserFollowingsRequestBuilder(Integer userId) {
            this.userId = userId;
        }

        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return GetUserFollowingsRequestBuilder
         */
        public GetUserFollowingsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getUserFollowings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserFollowingsCall(userId, limit, _callback);
        }


        /**
         * Execute getUserFollowings request
         * @return Users
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Users execute() throws ApiException {
            ApiResponse<Users> localVarResp = getUserFollowingsWithHttpInfo(userId, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserFollowings request with HTTP info returned
         * @return ApiResponse&lt;Users&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Users> executeWithHttpInfo() throws ApiException {
            return getUserFollowingsWithHttpInfo(userId, limit);
        }

        /**
         * Execute getUserFollowings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Users> _callback) throws ApiException {
            return getUserFollowingsAsync(userId, limit, _callback);
        }
    }

    /**
     * Returns a list of user’s followings.
     * Returns list of users that (user_id) follows.
     * @param userId SoundCloud User id (required)
     * @return GetUserFollowingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetUserFollowingsRequestBuilder getUserFollowings(Integer userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new GetUserFollowingsRequestBuilder(userId);
    }
    private okhttp3.Call getUserPlaylistsCall(Integer userId, List<String> access, Boolean showTracks, Integer limit, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/playlists"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (access != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "access", access));
        }

        if (showTracks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_tracks", showTracks));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (linkedPartitioning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_partitioning", linkedPartitioning));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPlaylistsValidateBeforeCall(Integer userId, List<String> access, Boolean showTracks, Integer limit, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserPlaylists(Async)");
        }

        return getUserPlaylistsCall(userId, access, showTracks, limit, linkedPartitioning, _callback);

    }


    private ApiResponse<Object> getUserPlaylistsWithHttpInfo(Integer userId, List<String> access, Boolean showTracks, Integer limit, Boolean linkedPartitioning) throws ApiException {
        okhttp3.Call localVarCall = getUserPlaylistsValidateBeforeCall(userId, access, showTracks, limit, linkedPartitioning, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserPlaylistsAsync(Integer userId, List<String> access, Boolean showTracks, Integer limit, Boolean linkedPartitioning, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPlaylistsValidateBeforeCall(userId, access, showTracks, limit, linkedPartitioning, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserPlaylistsRequestBuilder {
        private final Integer userId;
        private List<String> access;
        private Boolean showTracks;
        private Integer limit;
        private Boolean linkedPartitioning;

        private GetUserPlaylistsRequestBuilder(Integer userId) {
            this.userId = userId;
        }

        /**
         * Set access
         * @param access Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you&#39;d like to see all possible tracks. See &#x60;Track#access&#x60; schema for more details.  (optional)
         * @return GetUserPlaylistsRequestBuilder
         */
        public GetUserPlaylistsRequestBuilder access(List<String> access) {
            this.access = access;
            return this;
        }
        
        /**
         * Set showTracks
         * @param showTracks A boolean flag to request a playlist with or without tracks. Default is &#x60;true&#x60;. (optional)
         * @return GetUserPlaylistsRequestBuilder
         */
        public GetUserPlaylistsRequestBuilder showTracks(Boolean showTracks) {
            this.showTracks = showTracks;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return GetUserPlaylistsRequestBuilder
         */
        public GetUserPlaylistsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set linkedPartitioning
         * @param linkedPartitioning Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used) (optional)
         * @return GetUserPlaylistsRequestBuilder
         */
        public GetUserPlaylistsRequestBuilder linkedPartitioning(Boolean linkedPartitioning) {
            this.linkedPartitioning = linkedPartitioning;
            return this;
        }
        
        /**
         * Build call for getUserPlaylists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserPlaylistsCall(userId, access, showTracks, limit, linkedPartitioning, _callback);
        }


        /**
         * Execute getUserPlaylists request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getUserPlaylistsWithHttpInfo(userId, access, showTracks, limit, linkedPartitioning);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserPlaylists request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getUserPlaylistsWithHttpInfo(userId, access, showTracks, limit, linkedPartitioning);
        }

        /**
         * Execute getUserPlaylists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getUserPlaylistsAsync(userId, access, showTracks, limit, linkedPartitioning, _callback);
        }
    }

    /**
     * Returns a list of user&#39;s playlists.
     * 
     * @param userId SoundCloud User id (required)
     * @return GetUserPlaylistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetUserPlaylistsRequestBuilder getUserPlaylists(Integer userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new GetUserPlaylistsRequestBuilder(userId);
    }
    private okhttp3.Call getUserTracksCall(Integer userId, List<String> access, Integer limit, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/tracks"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (access != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "access", access));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (linkedPartitioning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_partitioning", linkedPartitioning));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserTracksValidateBeforeCall(Integer userId, List<String> access, Integer limit, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserTracks(Async)");
        }

        return getUserTracksCall(userId, access, limit, linkedPartitioning, _callback);

    }


    private ApiResponse<Object> getUserTracksWithHttpInfo(Integer userId, List<String> access, Integer limit, Boolean linkedPartitioning) throws ApiException {
        okhttp3.Call localVarCall = getUserTracksValidateBeforeCall(userId, access, limit, linkedPartitioning, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserTracksAsync(Integer userId, List<String> access, Integer limit, Boolean linkedPartitioning, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserTracksValidateBeforeCall(userId, access, limit, linkedPartitioning, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserTracksRequestBuilder {
        private final Integer userId;
        private List<String> access;
        private Integer limit;
        private Boolean linkedPartitioning;

        private GetUserTracksRequestBuilder(Integer userId) {
            this.userId = userId;
        }

        /**
         * Set access
         * @param access Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you&#39;d like to see all possible tracks. See &#x60;Track#access&#x60; schema for more details.  (optional)
         * @return GetUserTracksRequestBuilder
         */
        public GetUserTracksRequestBuilder access(List<String> access) {
            this.access = access;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return GetUserTracksRequestBuilder
         */
        public GetUserTracksRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set linkedPartitioning
         * @param linkedPartitioning Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used) (optional)
         * @return GetUserTracksRequestBuilder
         */
        public GetUserTracksRequestBuilder linkedPartitioning(Boolean linkedPartitioning) {
            this.linkedPartitioning = linkedPartitioning;
            return this;
        }
        
        /**
         * Build call for getUserTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserTracksCall(userId, access, limit, linkedPartitioning, _callback);
        }


        /**
         * Execute getUserTracks request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getUserTracksWithHttpInfo(userId, access, limit, linkedPartitioning);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserTracks request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getUserTracksWithHttpInfo(userId, access, limit, linkedPartitioning);
        }

        /**
         * Execute getUserTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getUserTracksAsync(userId, access, limit, linkedPartitioning, _callback);
        }
    }

    /**
     * Returns a list of user&#39;s tracks.
     * 
     * @param userId SoundCloud User id (required)
     * @return GetUserTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetUserTracksRequestBuilder getUserTracks(Integer userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new GetUserTracksRequestBuilder(userId);
    }
    private okhttp3.Call getUserWebProfilesCall(Integer userId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/web-profiles"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserWebProfilesValidateBeforeCall(Integer userId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserWebProfiles(Async)");
        }

        return getUserWebProfilesCall(userId, limit, _callback);

    }


    private ApiResponse<List<WebProfilesInner>> getUserWebProfilesWithHttpInfo(Integer userId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getUserWebProfilesValidateBeforeCall(userId, limit, null);
        Type localVarReturnType = new TypeToken<List<WebProfilesInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserWebProfilesAsync(Integer userId, Integer limit, final ApiCallback<List<WebProfilesInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserWebProfilesValidateBeforeCall(userId, limit, _callback);
        Type localVarReturnType = new TypeToken<List<WebProfilesInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserWebProfilesRequestBuilder {
        private final Integer userId;
        private Integer limit;

        private GetUserWebProfilesRequestBuilder(Integer userId) {
            this.userId = userId;
        }

        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return GetUserWebProfilesRequestBuilder
         */
        public GetUserWebProfilesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getUserWebProfiles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserWebProfilesCall(userId, limit, _callback);
        }


        /**
         * Execute getUserWebProfiles request
         * @return List&lt;WebProfilesInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<WebProfilesInner> execute() throws ApiException {
            ApiResponse<List<WebProfilesInner>> localVarResp = getUserWebProfilesWithHttpInfo(userId, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserWebProfiles request with HTTP info returned
         * @return ApiResponse&lt;List&lt;WebProfilesInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<WebProfilesInner>> executeWithHttpInfo() throws ApiException {
            return getUserWebProfilesWithHttpInfo(userId, limit);
        }

        /**
         * Execute getUserWebProfiles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<WebProfilesInner>> _callback) throws ApiException {
            return getUserWebProfilesAsync(userId, limit, _callback);
        }
    }

    /**
     * Returns list of user&#39;s links added to their profile (website, facebook, instagram).
     * 
     * @param userId SoundCloud User id (required)
     * @return GetUserWebProfilesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetUserWebProfilesRequestBuilder getUserWebProfiles(Integer userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new GetUserWebProfilesRequestBuilder(userId);
    }
    private okhttp3.Call listFavoritesCall(Integer userId, Integer limit, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/favorites"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (linkedPartitioning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_partitioning", linkedPartitioning));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFavoritesValidateBeforeCall(Integer userId, Integer limit, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listFavorites(Async)");
        }

        return listFavoritesCall(userId, limit, linkedPartitioning, _callback);

    }


    private ApiResponse<Object> listFavoritesWithHttpInfo(Integer userId, Integer limit, Boolean linkedPartitioning) throws ApiException {
        okhttp3.Call localVarCall = listFavoritesValidateBeforeCall(userId, limit, linkedPartitioning, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFavoritesAsync(Integer userId, Integer limit, Boolean linkedPartitioning, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFavoritesValidateBeforeCall(userId, limit, linkedPartitioning, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFavoritesRequestBuilder {
        private final Integer userId;
        private Integer limit;
        private Boolean linkedPartitioning;

        private ListFavoritesRequestBuilder(Integer userId) {
            this.userId = userId;
        }

        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return ListFavoritesRequestBuilder
         */
        public ListFavoritesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set linkedPartitioning
         * @param linkedPartitioning Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used) (optional)
         * @return ListFavoritesRequestBuilder
         */
        public ListFavoritesRequestBuilder linkedPartitioning(Boolean linkedPartitioning) {
            this.linkedPartitioning = linkedPartitioning;
            return this;
        }
        
        /**
         * Build call for listFavorites
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFavoritesCall(userId, limit, linkedPartitioning, _callback);
        }


        /**
         * Execute listFavorites request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = listFavoritesWithHttpInfo(userId, limit, linkedPartitioning);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFavorites request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return listFavoritesWithHttpInfo(userId, limit, linkedPartitioning);
        }

        /**
         * Execute listFavorites request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return listFavoritesAsync(userId, limit, linkedPartitioning, _callback);
        }
    }

    /**
     * Returns a list of user&#39;s favorited or liked tracks. (use /users/:userId/likes/tracks instead, to fetch a user&#39;s likes)
     * 
     * @param userId SoundCloud User id (required)
     * @return ListFavoritesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListFavoritesRequestBuilder listFavorites(Integer userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new ListFavoritesRequestBuilder(userId);
    }
    private okhttp3.Call listLikedPlaylistsCall(Integer userId, Integer limit, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/likes/playlists"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (linkedPartitioning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_partitioning", linkedPartitioning));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLikedPlaylistsValidateBeforeCall(Integer userId, Integer limit, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listLikedPlaylists(Async)");
        }

        return listLikedPlaylistsCall(userId, limit, linkedPartitioning, _callback);

    }


    private ApiResponse<Object> listLikedPlaylistsWithHttpInfo(Integer userId, Integer limit, Boolean linkedPartitioning) throws ApiException {
        okhttp3.Call localVarCall = listLikedPlaylistsValidateBeforeCall(userId, limit, linkedPartitioning, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLikedPlaylistsAsync(Integer userId, Integer limit, Boolean linkedPartitioning, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLikedPlaylistsValidateBeforeCall(userId, limit, linkedPartitioning, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLikedPlaylistsRequestBuilder {
        private final Integer userId;
        private Integer limit;
        private Boolean linkedPartitioning;

        private ListLikedPlaylistsRequestBuilder(Integer userId) {
            this.userId = userId;
        }

        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return ListLikedPlaylistsRequestBuilder
         */
        public ListLikedPlaylistsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set linkedPartitioning
         * @param linkedPartitioning Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used) (optional)
         * @return ListLikedPlaylistsRequestBuilder
         */
        public ListLikedPlaylistsRequestBuilder linkedPartitioning(Boolean linkedPartitioning) {
            this.linkedPartitioning = linkedPartitioning;
            return this;
        }
        
        /**
         * Build call for listLikedPlaylists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLikedPlaylistsCall(userId, limit, linkedPartitioning, _callback);
        }


        /**
         * Execute listLikedPlaylists request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = listLikedPlaylistsWithHttpInfo(userId, limit, linkedPartitioning);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLikedPlaylists request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return listLikedPlaylistsWithHttpInfo(userId, limit, linkedPartitioning);
        }

        /**
         * Execute listLikedPlaylists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return listLikedPlaylistsAsync(userId, limit, linkedPartitioning, _callback);
        }
    }

    /**
     * Returns a list of user&#39;s liked playlists.
     * 
     * @param userId SoundCloud User id (required)
     * @return ListLikedPlaylistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListLikedPlaylistsRequestBuilder listLikedPlaylists(Integer userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new ListLikedPlaylistsRequestBuilder(userId);
    }
    private okhttp3.Call listLikedTracksCall(Integer userId, List<String> access, Integer limit, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/likes/tracks"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (access != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "access", access));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (linkedPartitioning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_partitioning", linkedPartitioning));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLikedTracksValidateBeforeCall(Integer userId, List<String> access, Integer limit, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling listLikedTracks(Async)");
        }

        return listLikedTracksCall(userId, access, limit, linkedPartitioning, _callback);

    }


    private ApiResponse<Object> listLikedTracksWithHttpInfo(Integer userId, List<String> access, Integer limit, Boolean linkedPartitioning) throws ApiException {
        okhttp3.Call localVarCall = listLikedTracksValidateBeforeCall(userId, access, limit, linkedPartitioning, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLikedTracksAsync(Integer userId, List<String> access, Integer limit, Boolean linkedPartitioning, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLikedTracksValidateBeforeCall(userId, access, limit, linkedPartitioning, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLikedTracksRequestBuilder {
        private final Integer userId;
        private List<String> access;
        private Integer limit;
        private Boolean linkedPartitioning;

        private ListLikedTracksRequestBuilder(Integer userId) {
            this.userId = userId;
        }

        /**
         * Set access
         * @param access Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you&#39;d like to see all possible tracks. See &#x60;Track#access&#x60; schema for more details.  (optional)
         * @return ListLikedTracksRequestBuilder
         */
        public ListLikedTracksRequestBuilder access(List<String> access) {
            this.access = access;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return ListLikedTracksRequestBuilder
         */
        public ListLikedTracksRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set linkedPartitioning
         * @param linkedPartitioning Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used) (optional)
         * @return ListLikedTracksRequestBuilder
         */
        public ListLikedTracksRequestBuilder linkedPartitioning(Boolean linkedPartitioning) {
            this.linkedPartitioning = linkedPartitioning;
            return this;
        }
        
        /**
         * Build call for listLikedTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLikedTracksCall(userId, access, limit, linkedPartitioning, _callback);
        }


        /**
         * Execute listLikedTracks request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = listLikedTracksWithHttpInfo(userId, access, limit, linkedPartitioning);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLikedTracks request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return listLikedTracksWithHttpInfo(userId, access, limit, linkedPartitioning);
        }

        /**
         * Execute listLikedTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return listLikedTracksAsync(userId, access, limit, linkedPartitioning, _callback);
        }
    }

    /**
     * Returns a list of user&#39;s liked tracks.
     * 
     * @param userId SoundCloud User id (required)
     * @return ListLikedTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListLikedTracksRequestBuilder listLikedTracks(Integer userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new ListLikedTracksRequestBuilder(userId);
    }
}
