/*
 * SoundCloud Public API Specification
 * Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Activities;
import com.konfigthis.client.model.Me;
import com.konfigthis.client.model.Track;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.Users;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteFollowedUserCall(Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/followings/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFollowedUserValidateBeforeCall(Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteFollowedUser(Async)");
        }

        return deleteFollowedUserCall(userId, _callback);

    }


    private ApiResponse<Void> deleteFollowedUserWithHttpInfo(Integer userId) throws ApiException {
        okhttp3.Call localVarCall = deleteFollowedUserValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteFollowedUserAsync(Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFollowedUserValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteFollowedUserRequestBuilder {
        private final Integer userId;

        private DeleteFollowedUserRequestBuilder(Integer userId) {
            this.userId = userId;
        }

        /**
         * Build call for deleteFollowedUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFollowedUserCall(userId, _callback);
        }


        /**
         * Execute deleteFollowedUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteFollowedUserWithHttpInfo(userId);
        }

        /**
         * Execute deleteFollowedUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteFollowedUserWithHttpInfo(userId);
        }

        /**
         * Execute deleteFollowedUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteFollowedUserAsync(userId, _callback);
        }
    }

    /**
     * Deletes a user who is followed by the authenticated user.
     * 
     * @param userId SoundCloud User id (required)
     * @return DeleteFollowedUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFollowedUserRequestBuilder deleteFollowedUser(Integer userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new DeleteFollowedUserRequestBuilder(userId);
    }
    private okhttp3.Call followUserCall(Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/followings/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call followUserValidateBeforeCall(Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling followUser(Async)");
        }

        return followUserCall(userId, _callback);

    }


    private ApiResponse<Void> followUserWithHttpInfo(Integer userId) throws ApiException {
        okhttp3.Call localVarCall = followUserValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call followUserAsync(Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = followUserValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class FollowUserRequestBuilder {
        private final Integer userId;

        private FollowUserRequestBuilder(Integer userId) {
            this.userId = userId;
        }

        /**
         * Build call for followUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return followUserCall(userId, _callback);
        }


        /**
         * Execute followUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            followUserWithHttpInfo(userId);
        }

        /**
         * Execute followUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return followUserWithHttpInfo(userId);
        }

        /**
         * Execute followUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return followUserAsync(userId, _callback);
        }
    }

    /**
     * Follows a user.
     * 
     * @param userId SoundCloud User id (required)
     * @return FollowUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public FollowUserRequestBuilder followUser(Integer userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new FollowUserRequestBuilder(userId);
    }
    private okhttp3.Call getActivitiesCall(List<String> access, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/activities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (access != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "access", access));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActivitiesValidateBeforeCall(List<String> access, Integer limit, final ApiCallback _callback) throws ApiException {
        return getActivitiesCall(access, limit, _callback);

    }


    private ApiResponse<Activities> getActivitiesWithHttpInfo(List<String> access, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getActivitiesValidateBeforeCall(access, limit, null);
        Type localVarReturnType = new TypeToken<Activities>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getActivitiesAsync(List<String> access, Integer limit, final ApiCallback<Activities> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActivitiesValidateBeforeCall(access, limit, _callback);
        Type localVarReturnType = new TypeToken<Activities>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetActivitiesRequestBuilder {
        private List<String> access;
        private Integer limit;

        private GetActivitiesRequestBuilder() {
        }

        /**
         * Set access
         * @param access Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you&#39;d like to see all possible tracks. See &#x60;Track#access&#x60; schema for more details.  (optional)
         * @return GetActivitiesRequestBuilder
         */
        public GetActivitiesRequestBuilder access(List<String> access) {
            this.access = access;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return GetActivitiesRequestBuilder
         */
        public GetActivitiesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getActivities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getActivitiesCall(access, limit, _callback);
        }


        /**
         * Execute getActivities request
         * @return Activities
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Activities execute() throws ApiException {
            ApiResponse<Activities> localVarResp = getActivitiesWithHttpInfo(access, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getActivities request with HTTP info returned
         * @return ApiResponse&lt;Activities&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Activities> executeWithHttpInfo() throws ApiException {
            return getActivitiesWithHttpInfo(access, limit);
        }

        /**
         * Execute getActivities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Activities> _callback) throws ApiException {
            return getActivitiesAsync(access, limit, _callback);
        }
    }

    /**
     * Returns the authenticated user&#39;s activities.
     * 
     * @return GetActivitiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetActivitiesRequestBuilder getActivities() throws IllegalArgumentException {
        return new GetActivitiesRequestBuilder();
    }
    private okhttp3.Call getFollowedUserCall(Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/followings/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowedUserValidateBeforeCall(Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getFollowedUser(Async)");
        }

        return getFollowedUserCall(userId, _callback);

    }


    private ApiResponse<User> getFollowedUserWithHttpInfo(Integer userId) throws ApiException {
        okhttp3.Call localVarCall = getFollowedUserValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFollowedUserAsync(Integer userId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowedUserValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFollowedUserRequestBuilder {
        private final Integer userId;

        private GetFollowedUserRequestBuilder(Integer userId) {
            this.userId = userId;
        }

        /**
         * Build call for getFollowedUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFollowedUserCall(userId, _callback);
        }


        /**
         * Execute getFollowedUser request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public User execute() throws ApiException {
            ApiResponse<User> localVarResp = getFollowedUserWithHttpInfo(userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFollowedUser request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            return getFollowedUserWithHttpInfo(userId);
        }

        /**
         * Execute getFollowedUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            return getFollowedUserAsync(userId, _callback);
        }
    }

    /**
     * Returns a user who is followed by the authenticated user. (use /users/{user_id} instead, to fetch the user details)
     * 
     * @param userId SoundCloud User id (required)
     * @return GetFollowedUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetFollowedUserRequestBuilder getFollowedUser(Integer userId) throws IllegalArgumentException {
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
        return new GetFollowedUserRequestBuilder(userId);
    }
    private okhttp3.Call getFollowedUsersCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/followings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowedUsersValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return getFollowedUsersCall(limit, offset, _callback);

    }


    private ApiResponse<Users> getFollowedUsersWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getFollowedUsersValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFollowedUsersAsync(Integer limit, Integer offset, final ApiCallback<Users> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowedUsersValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFollowedUsersRequestBuilder {
        private Integer limit;
        private Integer offset;

        private GetFollowedUsersRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return GetFollowedUsersRequestBuilder
         */
        public GetFollowedUsersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset of first result. Deprecated, use &#x60;linked_partitioning&#x60; instead. (optional, default to 0)
         * @return GetFollowedUsersRequestBuilder
         */
        public GetFollowedUsersRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getFollowedUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFollowedUsersCall(limit, offset, _callback);
        }


        /**
         * Execute getFollowedUsers request
         * @return Users
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Users execute() throws ApiException {
            ApiResponse<Users> localVarResp = getFollowedUsersWithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFollowedUsers request with HTTP info returned
         * @return ApiResponse&lt;Users&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Users> executeWithHttpInfo() throws ApiException {
            return getFollowedUsersWithHttpInfo(limit, offset);
        }

        /**
         * Execute getFollowedUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Users> _callback) throws ApiException {
            return getFollowedUsersAsync(limit, offset, _callback);
        }
    }

    /**
     * Returns a list of users who are followed by the authenticated user.
     * 
     * @return GetFollowedUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFollowedUsersRequestBuilder getFollowedUsers() throws IllegalArgumentException {
        return new GetFollowedUsersRequestBuilder();
    }
    private okhttp3.Call getFollowerByIdCall(Integer followerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/followers/{follower_id}"
            .replace("{" + "follower_id" + "}", localVarApiClient.escapeString(followerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowerByIdValidateBeforeCall(Integer followerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'followerId' is set
        if (followerId == null) {
            throw new ApiException("Missing the required parameter 'followerId' when calling getFollowerById(Async)");
        }

        return getFollowerByIdCall(followerId, _callback);

    }


    private ApiResponse<User> getFollowerByIdWithHttpInfo(Integer followerId) throws ApiException {
        okhttp3.Call localVarCall = getFollowerByIdValidateBeforeCall(followerId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFollowerByIdAsync(Integer followerId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowerByIdValidateBeforeCall(followerId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFollowerByIdRequestBuilder {
        private final Integer followerId;

        private GetFollowerByIdRequestBuilder(Integer followerId) {
            this.followerId = followerId;
        }

        /**
         * Build call for getFollowerById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFollowerByIdCall(followerId, _callback);
        }


        /**
         * Execute getFollowerById request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public User execute() throws ApiException {
            ApiResponse<User> localVarResp = getFollowerByIdWithHttpInfo(followerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFollowerById request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            return getFollowerByIdWithHttpInfo(followerId);
        }

        /**
         * Execute getFollowerById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            return getFollowerByIdAsync(followerId, _callback);
        }
    }

    /**
     * Returns a user who is following the authenticated user. (use /users/{user_id} instead, to fetch the user details)
     * 
     * @param followerId SoundCloud User id to denote a Follower (required)
     * @return GetFollowerByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetFollowerByIdRequestBuilder getFollowerById(Integer followerId) throws IllegalArgumentException {
        if (followerId == null) throw new IllegalArgumentException("\"followerId\" is required but got null");
        return new GetFollowerByIdRequestBuilder(followerId);
    }
    private okhttp3.Call getFollowersListCall(Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/followers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFollowersListValidateBeforeCall(Integer limit, final ApiCallback _callback) throws ApiException {
        return getFollowersListCall(limit, _callback);

    }


    private ApiResponse<Users> getFollowersListWithHttpInfo(Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getFollowersListValidateBeforeCall(limit, null);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFollowersListAsync(Integer limit, final ApiCallback<Users> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFollowersListValidateBeforeCall(limit, _callback);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFollowersListRequestBuilder {
        private Integer limit;

        private GetFollowersListRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return GetFollowersListRequestBuilder
         */
        public GetFollowersListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getFollowersList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFollowersListCall(limit, _callback);
        }


        /**
         * Execute getFollowersList request
         * @return Users
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Users execute() throws ApiException {
            ApiResponse<Users> localVarResp = getFollowersListWithHttpInfo(limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFollowersList request with HTTP info returned
         * @return ApiResponse&lt;Users&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Users> executeWithHttpInfo() throws ApiException {
            return getFollowersListWithHttpInfo(limit);
        }

        /**
         * Execute getFollowersList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Users> _callback) throws ApiException {
            return getFollowersListAsync(limit, _callback);
        }
    }

    /**
     * Returns a list of users who are following the authenticated user.
     * 
     * @return GetFollowersListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetFollowersListRequestBuilder getFollowersList() throws IllegalArgumentException {
        return new GetFollowersListRequestBuilder();
    }
    private okhttp3.Call getLikedPlaylistsCall(Integer limit, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/likes/playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (linkedPartitioning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_partitioning", linkedPartitioning));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLikedPlaylistsValidateBeforeCall(Integer limit, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        return getLikedPlaylistsCall(limit, linkedPartitioning, _callback);

    }


    private ApiResponse<Object> getLikedPlaylistsWithHttpInfo(Integer limit, Boolean linkedPartitioning) throws ApiException {
        okhttp3.Call localVarCall = getLikedPlaylistsValidateBeforeCall(limit, linkedPartitioning, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLikedPlaylistsAsync(Integer limit, Boolean linkedPartitioning, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLikedPlaylistsValidateBeforeCall(limit, linkedPartitioning, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLikedPlaylistsRequestBuilder {
        private Integer limit;
        private Boolean linkedPartitioning;

        private GetLikedPlaylistsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return GetLikedPlaylistsRequestBuilder
         */
        public GetLikedPlaylistsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set linkedPartitioning
         * @param linkedPartitioning Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used) (optional)
         * @return GetLikedPlaylistsRequestBuilder
         */
        public GetLikedPlaylistsRequestBuilder linkedPartitioning(Boolean linkedPartitioning) {
            this.linkedPartitioning = linkedPartitioning;
            return this;
        }
        
        /**
         * Build call for getLikedPlaylists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLikedPlaylistsCall(limit, linkedPartitioning, _callback);
        }


        /**
         * Execute getLikedPlaylists request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getLikedPlaylistsWithHttpInfo(limit, linkedPartitioning);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLikedPlaylists request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getLikedPlaylistsWithHttpInfo(limit, linkedPartitioning);
        }

        /**
         * Execute getLikedPlaylists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getLikedPlaylistsAsync(limit, linkedPartitioning, _callback);
        }
    }

    /**
     * Returns a list of favorited or liked playlists of the authenticated user.
     * 
     * @return GetLikedPlaylistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetLikedPlaylistsRequestBuilder getLikedPlaylists() throws IllegalArgumentException {
        return new GetLikedPlaylistsRequestBuilder();
    }
    private okhttp3.Call getRecentActivitiesCall(List<String> access, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/activities/all/own";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (access != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "access", access));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecentActivitiesValidateBeforeCall(List<String> access, Integer limit, final ApiCallback _callback) throws ApiException {
        return getRecentActivitiesCall(access, limit, _callback);

    }


    private ApiResponse<Activities> getRecentActivitiesWithHttpInfo(List<String> access, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getRecentActivitiesValidateBeforeCall(access, limit, null);
        Type localVarReturnType = new TypeToken<Activities>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecentActivitiesAsync(List<String> access, Integer limit, final ApiCallback<Activities> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecentActivitiesValidateBeforeCall(access, limit, _callback);
        Type localVarReturnType = new TypeToken<Activities>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecentActivitiesRequestBuilder {
        private List<String> access;
        private Integer limit;

        private GetRecentActivitiesRequestBuilder() {
        }

        /**
         * Set access
         * @param access Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you&#39;d like to see all possible tracks. See &#x60;Track#access&#x60; schema for more details.  (optional)
         * @return GetRecentActivitiesRequestBuilder
         */
        public GetRecentActivitiesRequestBuilder access(List<String> access) {
            this.access = access;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return GetRecentActivitiesRequestBuilder
         */
        public GetRecentActivitiesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getRecentActivities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecentActivitiesCall(access, limit, _callback);
        }


        /**
         * Execute getRecentActivities request
         * @return Activities
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Activities execute() throws ApiException {
            ApiResponse<Activities> localVarResp = getRecentActivitiesWithHttpInfo(access, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecentActivities request with HTTP info returned
         * @return ApiResponse&lt;Activities&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Activities> executeWithHttpInfo() throws ApiException {
            return getRecentActivitiesWithHttpInfo(access, limit);
        }

        /**
         * Execute getRecentActivities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Activities> _callback) throws ApiException {
            return getRecentActivitiesAsync(access, limit, _callback);
        }
    }

    /**
     * Recent the authenticated user&#39;s activities.
     * 
     * @return GetRecentActivitiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetRecentActivitiesRequestBuilder getRecentActivities() throws IllegalArgumentException {
        return new GetRecentActivitiesRequestBuilder();
    }
    private okhttp3.Call getRecentTracksCall(List<String> access, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/activities/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (access != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "access", access));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecentTracksValidateBeforeCall(List<String> access, Integer limit, final ApiCallback _callback) throws ApiException {
        return getRecentTracksCall(access, limit, _callback);

    }


    private ApiResponse<Activities> getRecentTracksWithHttpInfo(List<String> access, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getRecentTracksValidateBeforeCall(access, limit, null);
        Type localVarReturnType = new TypeToken<Activities>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecentTracksAsync(List<String> access, Integer limit, final ApiCallback<Activities> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecentTracksValidateBeforeCall(access, limit, _callback);
        Type localVarReturnType = new TypeToken<Activities>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecentTracksRequestBuilder {
        private List<String> access;
        private Integer limit;

        private GetRecentTracksRequestBuilder() {
        }

        /**
         * Set access
         * @param access Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you&#39;d like to see all possible tracks. See &#x60;Track#access&#x60; schema for more details.  (optional)
         * @return GetRecentTracksRequestBuilder
         */
        public GetRecentTracksRequestBuilder access(List<String> access) {
            this.access = access;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return GetRecentTracksRequestBuilder
         */
        public GetRecentTracksRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getRecentTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecentTracksCall(access, limit, _callback);
        }


        /**
         * Execute getRecentTracks request
         * @return Activities
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Activities execute() throws ApiException {
            ApiResponse<Activities> localVarResp = getRecentTracksWithHttpInfo(access, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecentTracks request with HTTP info returned
         * @return ApiResponse&lt;Activities&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Activities> executeWithHttpInfo() throws ApiException {
            return getRecentTracksWithHttpInfo(access, limit);
        }

        /**
         * Execute getRecentTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Activities> _callback) throws ApiException {
            return getRecentTracksAsync(access, limit, _callback);
        }
    }

    /**
     * Returns the authenticated user&#39;s recent track related activities.
     * 
     * @return GetRecentTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetRecentTracksRequestBuilder getRecentTracks() throws IllegalArgumentException {
        return new GetRecentTracksRequestBuilder();
    }
    private okhttp3.Call getUserInformationCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserInformationValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserInformationCall(_callback);

    }


    private ApiResponse<Me> getUserInformationWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserInformationValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Me>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserInformationAsync(final ApiCallback<Me> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserInformationValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Me>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserInformationRequestBuilder {

        private GetUserInformationRequestBuilder() {
        }

        /**
         * Build call for getUserInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserInformationCall(_callback);
        }


        /**
         * Execute getUserInformation request
         * @return Me
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Me execute() throws ApiException {
            ApiResponse<Me> localVarResp = getUserInformationWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserInformation request with HTTP info returned
         * @return ApiResponse&lt;Me&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Me> executeWithHttpInfo() throws ApiException {
            return getUserInformationWithHttpInfo();
        }

        /**
         * Execute getUserInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Me> _callback) throws ApiException {
            return getUserInformationAsync(_callback);
        }
    }

    /**
     * Returns the authenticated userâ€™s information.
     * 
     * @return GetUserInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetUserInformationRequestBuilder getUserInformation() throws IllegalArgumentException {
        return new GetUserInformationRequestBuilder();
    }
    private okhttp3.Call listFollowedTracksCall(List<String> access, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/followings/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (access != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "access", access));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFollowedTracksValidateBeforeCall(List<String> access, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return listFollowedTracksCall(access, limit, offset, _callback);

    }


    private ApiResponse<List<Track>> listFollowedTracksWithHttpInfo(List<String> access, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listFollowedTracksValidateBeforeCall(access, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<Track>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFollowedTracksAsync(List<String> access, Integer limit, Integer offset, final ApiCallback<List<Track>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFollowedTracksValidateBeforeCall(access, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<Track>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFollowedTracksRequestBuilder {
        private List<String> access;
        private Integer limit;
        private Integer offset;

        private ListFollowedTracksRequestBuilder() {
        }

        /**
         * Set access
         * @param access Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you&#39;d like to see all possible tracks. See &#x60;Track#access&#x60; schema for more details.  (optional)
         * @return ListFollowedTracksRequestBuilder
         */
        public ListFollowedTracksRequestBuilder access(List<String> access) {
            this.access = access;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return ListFollowedTracksRequestBuilder
         */
        public ListFollowedTracksRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset Offset of first result. Deprecated, use &#x60;linked_partitioning&#x60; instead. (optional, default to 0)
         * @return ListFollowedTracksRequestBuilder
         */
        public ListFollowedTracksRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listFollowedTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFollowedTracksCall(access, limit, offset, _callback);
        }


        /**
         * Execute listFollowedTracks request
         * @return List&lt;Track&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public List<Track> execute() throws ApiException {
            ApiResponse<List<Track>> localVarResp = listFollowedTracksWithHttpInfo(access, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFollowedTracks request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Track&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Track>> executeWithHttpInfo() throws ApiException {
            return listFollowedTracksWithHttpInfo(access, limit, offset);
        }

        /**
         * Execute listFollowedTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Track>> _callback) throws ApiException {
            return listFollowedTracksAsync(access, limit, offset, _callback);
        }
    }

    /**
     * Returns a list of recent tracks from users followed by the authenticated user.
     * 
     * @return ListFollowedTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListFollowedTracksRequestBuilder listFollowedTracks() throws IllegalArgumentException {
        return new ListFollowedTracksRequestBuilder();
    }
    private okhttp3.Call listLikedTracksCall(Integer limit, List<String> access, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/likes/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (access != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "access", access));
        }

        if (linkedPartitioning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_partitioning", linkedPartitioning));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLikedTracksValidateBeforeCall(Integer limit, List<String> access, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        return listLikedTracksCall(limit, access, linkedPartitioning, _callback);

    }


    private ApiResponse<Object> listLikedTracksWithHttpInfo(Integer limit, List<String> access, Boolean linkedPartitioning) throws ApiException {
        okhttp3.Call localVarCall = listLikedTracksValidateBeforeCall(limit, access, linkedPartitioning, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLikedTracksAsync(Integer limit, List<String> access, Boolean linkedPartitioning, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLikedTracksValidateBeforeCall(limit, access, linkedPartitioning, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLikedTracksRequestBuilder {
        private Integer limit;
        private List<String> access;
        private Boolean linkedPartitioning;

        private ListLikedTracksRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return ListLikedTracksRequestBuilder
         */
        public ListLikedTracksRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set access
         * @param access Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you&#39;d like to see all possible tracks. See &#x60;Track#access&#x60; schema for more details.  (optional)
         * @return ListLikedTracksRequestBuilder
         */
        public ListLikedTracksRequestBuilder access(List<String> access) {
            this.access = access;
            return this;
        }
        
        /**
         * Set linkedPartitioning
         * @param linkedPartitioning Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used) (optional)
         * @return ListLikedTracksRequestBuilder
         */
        public ListLikedTracksRequestBuilder linkedPartitioning(Boolean linkedPartitioning) {
            this.linkedPartitioning = linkedPartitioning;
            return this;
        }
        
        /**
         * Build call for listLikedTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLikedTracksCall(limit, access, linkedPartitioning, _callback);
        }


        /**
         * Execute listLikedTracks request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = listLikedTracksWithHttpInfo(limit, access, linkedPartitioning);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLikedTracks request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return listLikedTracksWithHttpInfo(limit, access, linkedPartitioning);
        }

        /**
         * Execute listLikedTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return listLikedTracksAsync(limit, access, linkedPartitioning, _callback);
        }
    }

    /**
     * Returns a list of favorited or liked tracks of the authenticated user.
     * 
     * @return ListLikedTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListLikedTracksRequestBuilder listLikedTracks() throws IllegalArgumentException {
        return new ListLikedTracksRequestBuilder();
    }
    private okhttp3.Call listPlaylistsInfoTracksOwnerCall(Boolean showTracks, Boolean linkedPartitioning, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showTracks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_tracks", showTracks));
        }

        if (linkedPartitioning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_partitioning", linkedPartitioning));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPlaylistsInfoTracksOwnerValidateBeforeCall(Boolean showTracks, Boolean linkedPartitioning, Integer limit, final ApiCallback _callback) throws ApiException {
        return listPlaylistsInfoTracksOwnerCall(showTracks, linkedPartitioning, limit, _callback);

    }


    private ApiResponse<Object> listPlaylistsInfoTracksOwnerWithHttpInfo(Boolean showTracks, Boolean linkedPartitioning, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listPlaylistsInfoTracksOwnerValidateBeforeCall(showTracks, linkedPartitioning, limit, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPlaylistsInfoTracksOwnerAsync(Boolean showTracks, Boolean linkedPartitioning, Integer limit, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPlaylistsInfoTracksOwnerValidateBeforeCall(showTracks, linkedPartitioning, limit, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPlaylistsInfoTracksOwnerRequestBuilder {
        private Boolean showTracks;
        private Boolean linkedPartitioning;
        private Integer limit;

        private ListPlaylistsInfoTracksOwnerRequestBuilder() {
        }

        /**
         * Set showTracks
         * @param showTracks A boolean flag to request a playlist with or without tracks. Default is &#x60;true&#x60;. (optional)
         * @return ListPlaylistsInfoTracksOwnerRequestBuilder
         */
        public ListPlaylistsInfoTracksOwnerRequestBuilder showTracks(Boolean showTracks) {
            this.showTracks = showTracks;
            return this;
        }
        
        /**
         * Set linkedPartitioning
         * @param linkedPartitioning Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used) (optional)
         * @return ListPlaylistsInfoTracksOwnerRequestBuilder
         */
        public ListPlaylistsInfoTracksOwnerRequestBuilder linkedPartitioning(Boolean linkedPartitioning) {
            this.linkedPartitioning = linkedPartitioning;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return ListPlaylistsInfoTracksOwnerRequestBuilder
         */
        public ListPlaylistsInfoTracksOwnerRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listPlaylistsInfoTracksOwner
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPlaylistsInfoTracksOwnerCall(showTracks, linkedPartitioning, limit, _callback);
        }


        /**
         * Execute listPlaylistsInfoTracksOwner request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = listPlaylistsInfoTracksOwnerWithHttpInfo(showTracks, linkedPartitioning, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPlaylistsInfoTracksOwner request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return listPlaylistsInfoTracksOwnerWithHttpInfo(showTracks, linkedPartitioning, limit);
        }

        /**
         * Execute listPlaylistsInfoTracksOwner request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return listPlaylistsInfoTracksOwnerAsync(showTracks, linkedPartitioning, limit, _callback);
        }
    }

    /**
     * Returns userâ€™s playlists (sets).
     * Returns playlist info, playlist tracks and tracks owner info.
     * @return ListPlaylistsInfoTracksOwnerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListPlaylistsInfoTracksOwnerRequestBuilder listPlaylistsInfoTracksOwner() throws IllegalArgumentException {
        return new ListPlaylistsInfoTracksOwnerRequestBuilder();
    }
    private okhttp3.Call listUserTracksCall(Integer limit, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/tracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (linkedPartitioning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_partitioning", linkedPartitioning));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserTracksValidateBeforeCall(Integer limit, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        return listUserTracksCall(limit, linkedPartitioning, _callback);

    }


    private ApiResponse<Object> listUserTracksWithHttpInfo(Integer limit, Boolean linkedPartitioning) throws ApiException {
        okhttp3.Call localVarCall = listUserTracksValidateBeforeCall(limit, linkedPartitioning, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserTracksAsync(Integer limit, Boolean linkedPartitioning, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserTracksValidateBeforeCall(limit, linkedPartitioning, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserTracksRequestBuilder {
        private Integer limit;
        private Boolean linkedPartitioning;

        private ListUserTracksRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return ListUserTracksRequestBuilder
         */
        public ListUserTracksRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set linkedPartitioning
         * @param linkedPartitioning Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used) (optional)
         * @return ListUserTracksRequestBuilder
         */
        public ListUserTracksRequestBuilder linkedPartitioning(Boolean linkedPartitioning) {
            this.linkedPartitioning = linkedPartitioning;
            return this;
        }
        
        /**
         * Build call for listUserTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserTracksCall(limit, linkedPartitioning, _callback);
        }


        /**
         * Execute listUserTracks request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = listUserTracksWithHttpInfo(limit, linkedPartitioning);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserTracks request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return listUserTracksWithHttpInfo(limit, linkedPartitioning);
        }

        /**
         * Execute listUserTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return listUserTracksAsync(limit, linkedPartitioning, _callback);
        }
    }

    /**
     * Returns a list of user&#39;s tracks.
     * 
     * @return ListUserTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListUserTracksRequestBuilder listUserTracks() throws IllegalArgumentException {
        return new ListUserTracksRequestBuilder();
    }
}
