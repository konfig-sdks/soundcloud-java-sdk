/*
 * SoundCloud Public API Specification
 * Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateUpdatePlaylistRequest;
import com.konfigthis.client.model.CreateUpdatePlaylistRequestPlaylist;
import com.konfigthis.client.model.Playlist;
import com.konfigthis.client.model.PlaylistsCreateNewPlaylistRequest;
import com.konfigthis.client.model.Users;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PlaylistsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlaylistsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PlaylistsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewPlaylistCall(CreateUpdatePlaylistRequest createUpdatePlaylistRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdatePlaylistRequest;

        // create path and map variables
        String localVarPath = "/playlists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewPlaylistValidateBeforeCall(CreateUpdatePlaylistRequest createUpdatePlaylistRequest, final ApiCallback _callback) throws ApiException {
        return createNewPlaylistCall(createUpdatePlaylistRequest, _callback);

    }


    private ApiResponse<Playlist> createNewPlaylistWithHttpInfo(CreateUpdatePlaylistRequest createUpdatePlaylistRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewPlaylistValidateBeforeCall(createUpdatePlaylistRequest, null);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewPlaylistAsync(CreateUpdatePlaylistRequest createUpdatePlaylistRequest, final ApiCallback<Playlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewPlaylistValidateBeforeCall(createUpdatePlaylistRequest, _callback);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewPlaylistRequestBuilder {
        private CreateUpdatePlaylistRequestPlaylist playlist;

        private CreateNewPlaylistRequestBuilder() {
        }

        /**
         * Set playlist
         * @param playlist  (optional)
         * @return CreateNewPlaylistRequestBuilder
         */
        public CreateNewPlaylistRequestBuilder playlist(CreateUpdatePlaylistRequestPlaylist playlist) {
            this.playlist = playlist;
            return this;
        }
        
        /**
         * Build call for createNewPlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateUpdatePlaylistRequest createUpdatePlaylistRequest = buildBodyParams();
            return createNewPlaylistCall(createUpdatePlaylistRequest, _callback);
        }

        private CreateUpdatePlaylistRequest buildBodyParams() {
            CreateUpdatePlaylistRequest createUpdatePlaylistRequest = new CreateUpdatePlaylistRequest();
            createUpdatePlaylistRequest.playlist(this.playlist);
            return createUpdatePlaylistRequest;
        }

        /**
         * Execute createNewPlaylist request
         * @return Playlist
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Playlist execute() throws ApiException {
            CreateUpdatePlaylistRequest createUpdatePlaylistRequest = buildBodyParams();
            ApiResponse<Playlist> localVarResp = createNewPlaylistWithHttpInfo(createUpdatePlaylistRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewPlaylist request with HTTP info returned
         * @return ApiResponse&lt;Playlist&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Playlist> executeWithHttpInfo() throws ApiException {
            CreateUpdatePlaylistRequest createUpdatePlaylistRequest = buildBodyParams();
            return createNewPlaylistWithHttpInfo(createUpdatePlaylistRequest);
        }

        /**
         * Execute createNewPlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Playlist> _callback) throws ApiException {
            CreateUpdatePlaylistRequest createUpdatePlaylistRequest = buildBodyParams();
            return createNewPlaylistAsync(createUpdatePlaylistRequest, _callback);
        }
    }

    /**
     * Creates a playlist.
     * 
     * @return CreateNewPlaylistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewPlaylistRequestBuilder createNewPlaylist() throws IllegalArgumentException {
        return new CreateNewPlaylistRequestBuilder();
    }
    private okhttp3.Call deletePlaylistCall(Integer playlistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePlaylistValidateBeforeCall(Integer playlistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling deletePlaylist(Async)");
        }

        return deletePlaylistCall(playlistId, _callback);

    }


    private ApiResponse<Void> deletePlaylistWithHttpInfo(Integer playlistId) throws ApiException {
        okhttp3.Call localVarCall = deletePlaylistValidateBeforeCall(playlistId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePlaylistAsync(Integer playlistId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePlaylistValidateBeforeCall(playlistId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePlaylistRequestBuilder {
        private final Integer playlistId;

        private DeletePlaylistRequestBuilder(Integer playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Build call for deletePlaylist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePlaylistCall(playlistId, _callback);
        }


        /**
         * Execute deletePlaylist request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePlaylistWithHttpInfo(playlistId);
        }

        /**
         * Execute deletePlaylist request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePlaylistWithHttpInfo(playlistId);
        }

        /**
         * Execute deletePlaylist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePlaylistAsync(playlistId, _callback);
        }
    }

    /**
     * Deletes a playlist.
     * 
     * @param playlistId SoundCloud playlist id (required)
     * @return DeletePlaylistRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DeletePlaylistRequestBuilder deletePlaylist(Integer playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
        return new DeletePlaylistRequestBuilder(playlistId);
    }
    private okhttp3.Call getPlaylistByIdCall(Integer playlistId, String secretToken, List<String> access, Boolean showTracks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (secretToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret_token", secretToken));
        }

        if (access != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "access", access));
        }

        if (showTracks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_tracks", showTracks));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlaylistByIdValidateBeforeCall(Integer playlistId, String secretToken, List<String> access, Boolean showTracks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getPlaylistById(Async)");
        }

        return getPlaylistByIdCall(playlistId, secretToken, access, showTracks, _callback);

    }


    private ApiResponse<Playlist> getPlaylistByIdWithHttpInfo(Integer playlistId, String secretToken, List<String> access, Boolean showTracks) throws ApiException {
        okhttp3.Call localVarCall = getPlaylistByIdValidateBeforeCall(playlistId, secretToken, access, showTracks, null);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPlaylistByIdAsync(Integer playlistId, String secretToken, List<String> access, Boolean showTracks, final ApiCallback<Playlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlaylistByIdValidateBeforeCall(playlistId, secretToken, access, showTracks, _callback);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPlaylistByIdRequestBuilder {
        private final Integer playlistId;
        private String secretToken;
        private List<String> access;
        private Boolean showTracks;

        private GetPlaylistByIdRequestBuilder(Integer playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set secretToken
         * @param secretToken A secret token to fetch private playlists/tracks (optional)
         * @return GetPlaylistByIdRequestBuilder
         */
        public GetPlaylistByIdRequestBuilder secretToken(String secretToken) {
            this.secretToken = secretToken;
            return this;
        }
        
        /**
         * Set access
         * @param access Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you&#39;d like to see all possible tracks. See &#x60;Track#access&#x60; schema for more details.  (optional)
         * @return GetPlaylistByIdRequestBuilder
         */
        public GetPlaylistByIdRequestBuilder access(List<String> access) {
            this.access = access;
            return this;
        }
        
        /**
         * Set showTracks
         * @param showTracks A boolean flag to request a playlist with or without tracks. Default is &#x60;true&#x60;. (optional)
         * @return GetPlaylistByIdRequestBuilder
         */
        public GetPlaylistByIdRequestBuilder showTracks(Boolean showTracks) {
            this.showTracks = showTracks;
            return this;
        }
        
        /**
         * Build call for getPlaylistById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPlaylistByIdCall(playlistId, secretToken, access, showTracks, _callback);
        }


        /**
         * Execute getPlaylistById request
         * @return Playlist
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Playlist execute() throws ApiException {
            ApiResponse<Playlist> localVarResp = getPlaylistByIdWithHttpInfo(playlistId, secretToken, access, showTracks);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPlaylistById request with HTTP info returned
         * @return ApiResponse&lt;Playlist&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Playlist> executeWithHttpInfo() throws ApiException {
            return getPlaylistByIdWithHttpInfo(playlistId, secretToken, access, showTracks);
        }

        /**
         * Execute getPlaylistById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Playlist> _callback) throws ApiException {
            return getPlaylistByIdAsync(playlistId, secretToken, access, showTracks, _callback);
        }
    }

    /**
     * Returns a playlist.
     * 
     * @param playlistId SoundCloud playlist id (required)
     * @return GetPlaylistByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetPlaylistByIdRequestBuilder getPlaylistById(Integer playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
        return new GetPlaylistByIdRequestBuilder(playlistId);
    }
    private okhttp3.Call getTracksCall(Integer playlistId, String secretToken, List<String> access, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/tracks"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (secretToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret_token", secretToken));
        }

        if (access != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "access", access));
        }

        if (linkedPartitioning != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("linked_partitioning", linkedPartitioning));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTracksValidateBeforeCall(Integer playlistId, String secretToken, List<String> access, Boolean linkedPartitioning, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling getTracks(Async)");
        }

        return getTracksCall(playlistId, secretToken, access, linkedPartitioning, _callback);

    }


    private ApiResponse<Object> getTracksWithHttpInfo(Integer playlistId, String secretToken, List<String> access, Boolean linkedPartitioning) throws ApiException {
        okhttp3.Call localVarCall = getTracksValidateBeforeCall(playlistId, secretToken, access, linkedPartitioning, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTracksAsync(Integer playlistId, String secretToken, List<String> access, Boolean linkedPartitioning, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTracksValidateBeforeCall(playlistId, secretToken, access, linkedPartitioning, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTracksRequestBuilder {
        private final Integer playlistId;
        private String secretToken;
        private List<String> access;
        private Boolean linkedPartitioning;

        private GetTracksRequestBuilder(Integer playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set secretToken
         * @param secretToken A secret token to fetch private playlists/tracks (optional)
         * @return GetTracksRequestBuilder
         */
        public GetTracksRequestBuilder secretToken(String secretToken) {
            this.secretToken = secretToken;
            return this;
        }
        
        /**
         * Set access
         * @param access Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you&#39;d like to see all possible tracks. See &#x60;Track#access&#x60; schema for more details.  (optional)
         * @return GetTracksRequestBuilder
         */
        public GetTracksRequestBuilder access(List<String> access) {
            this.access = access;
            return this;
        }
        
        /**
         * Set linkedPartitioning
         * @param linkedPartitioning Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used) (optional)
         * @return GetTracksRequestBuilder
         */
        public GetTracksRequestBuilder linkedPartitioning(Boolean linkedPartitioning) {
            this.linkedPartitioning = linkedPartitioning;
            return this;
        }
        
        /**
         * Build call for getTracks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTracksCall(playlistId, secretToken, access, linkedPartitioning, _callback);
        }


        /**
         * Execute getTracks request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getTracksWithHttpInfo(playlistId, secretToken, access, linkedPartitioning);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTracks request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getTracksWithHttpInfo(playlistId, secretToken, access, linkedPartitioning);
        }

        /**
         * Execute getTracks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getTracksAsync(playlistId, secretToken, access, linkedPartitioning, _callback);
        }
    }

    /**
     * Returns tracks under a playlist.
     * 
     * @param playlistId SoundCloud playlist id (required)
     * @return GetTracksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetTracksRequestBuilder getTracks(Integer playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
        return new GetTracksRequestBuilder(playlistId);
    }
    private okhttp3.Call listRepostersCall(Integer playlistId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}/reposters"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json; charset=utf-8",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRepostersValidateBeforeCall(Integer playlistId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling listReposters(Async)");
        }

        return listRepostersCall(playlistId, limit, _callback);

    }


    private ApiResponse<Users> listRepostersWithHttpInfo(Integer playlistId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listRepostersValidateBeforeCall(playlistId, limit, null);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRepostersAsync(Integer playlistId, Integer limit, final ApiCallback<Users> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRepostersValidateBeforeCall(playlistId, limit, _callback);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRepostersRequestBuilder {
        private final Integer playlistId;
        private Integer limit;

        private ListRepostersRequestBuilder(Integer playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set limit
         * @param limit Number of results to return in the collection. (optional, default to 50)
         * @return ListRepostersRequestBuilder
         */
        public ListRepostersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listReposters
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRepostersCall(playlistId, limit, _callback);
        }


        /**
         * Execute listReposters request
         * @return Users
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Users execute() throws ApiException {
            ApiResponse<Users> localVarResp = listRepostersWithHttpInfo(playlistId, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listReposters request with HTTP info returned
         * @return ApiResponse&lt;Users&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Users> executeWithHttpInfo() throws ApiException {
            return listRepostersWithHttpInfo(playlistId, limit);
        }

        /**
         * Execute listReposters request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Users> _callback) throws ApiException {
            return listRepostersAsync(playlistId, limit, _callback);
        }
    }

    /**
     * Returns a collection of playlist&#39;s reposters.
     * 
     * @param playlistId SoundCloud playlist id (required)
     * @return ListRepostersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListRepostersRequestBuilder listReposters(Integer playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
        return new ListRepostersRequestBuilder(playlistId);
    }
    private okhttp3.Call updatePlaylistByIdCall(Integer playlistId, CreateUpdatePlaylistRequest createUpdatePlaylistRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUpdatePlaylistRequest;

        // create path and map variables
        String localVarPath = "/playlists/{playlist_id}"
            .replace("{" + "playlist_id" + "}", localVarApiClient.escapeString(playlistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AuthHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePlaylistByIdValidateBeforeCall(Integer playlistId, CreateUpdatePlaylistRequest createUpdatePlaylistRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'playlistId' is set
        if (playlistId == null) {
            throw new ApiException("Missing the required parameter 'playlistId' when calling updatePlaylistById(Async)");
        }

        return updatePlaylistByIdCall(playlistId, createUpdatePlaylistRequest, _callback);

    }


    private ApiResponse<Playlist> updatePlaylistByIdWithHttpInfo(Integer playlistId, CreateUpdatePlaylistRequest createUpdatePlaylistRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePlaylistByIdValidateBeforeCall(playlistId, createUpdatePlaylistRequest, null);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePlaylistByIdAsync(Integer playlistId, CreateUpdatePlaylistRequest createUpdatePlaylistRequest, final ApiCallback<Playlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePlaylistByIdValidateBeforeCall(playlistId, createUpdatePlaylistRequest, _callback);
        Type localVarReturnType = new TypeToken<Playlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePlaylistByIdRequestBuilder {
        private final Integer playlistId;
        private CreateUpdatePlaylistRequestPlaylist playlist;

        private UpdatePlaylistByIdRequestBuilder(Integer playlistId) {
            this.playlistId = playlistId;
        }

        /**
         * Set playlist
         * @param playlist  (optional)
         * @return UpdatePlaylistByIdRequestBuilder
         */
        public UpdatePlaylistByIdRequestBuilder playlist(CreateUpdatePlaylistRequestPlaylist playlist) {
            this.playlist = playlist;
            return this;
        }
        
        /**
         * Build call for updatePlaylistById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateUpdatePlaylistRequest createUpdatePlaylistRequest = buildBodyParams();
            return updatePlaylistByIdCall(playlistId, createUpdatePlaylistRequest, _callback);
        }

        private CreateUpdatePlaylistRequest buildBodyParams() {
            CreateUpdatePlaylistRequest createUpdatePlaylistRequest = new CreateUpdatePlaylistRequest();
            createUpdatePlaylistRequest.playlist(this.playlist);
            return createUpdatePlaylistRequest;
        }

        /**
         * Execute updatePlaylistById request
         * @return Playlist
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Playlist execute() throws ApiException {
            CreateUpdatePlaylistRequest createUpdatePlaylistRequest = buildBodyParams();
            ApiResponse<Playlist> localVarResp = updatePlaylistByIdWithHttpInfo(playlistId, createUpdatePlaylistRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePlaylistById request with HTTP info returned
         * @return ApiResponse&lt;Playlist&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Playlist> executeWithHttpInfo() throws ApiException {
            CreateUpdatePlaylistRequest createUpdatePlaylistRequest = buildBodyParams();
            return updatePlaylistByIdWithHttpInfo(playlistId, createUpdatePlaylistRequest);
        }

        /**
         * Execute updatePlaylistById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Playlist> _callback) throws ApiException {
            CreateUpdatePlaylistRequest createUpdatePlaylistRequest = buildBodyParams();
            return updatePlaylistByIdAsync(playlistId, createUpdatePlaylistRequest, _callback);
        }
    }

    /**
     * Updates a playlist.
     * 
     * @param playlistId SoundCloud playlist id (required)
     * @return UpdatePlaylistByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePlaylistByIdRequestBuilder updatePlaylistById(Integer playlistId) throws IllegalArgumentException {
        if (playlistId == null) throw new IllegalArgumentException("\"playlistId\" is required but got null");
        return new UpdatePlaylistByIdRequestBuilder(playlistId);
    }
}
