/*
 * SoundCloud Public API Specification
 * Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Track;
import com.konfigthis.client.model.TrackLabel;
import com.konfigthis.client.model.User;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Soundcloud Playlist Object
 */
@ApiModel(description = "Soundcloud Playlist Object")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Playlist {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_ARTWORK_URL = "artwork_url";
  @SerializedName(SERIALIZED_NAME_ARTWORK_URL)
  private String artworkUrl;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DOWNLOADABLE = "downloadable";
  @SerializedName(SERIALIZED_NAME_DOWNLOADABLE)
  private Boolean downloadable;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_EAN = "ean";
  @SerializedName(SERIALIZED_NAME_EAN)
  private String ean;

  public static final String SERIALIZED_NAME_EMBEDDABLE_BY = "embeddable_by";
  @SerializedName(SERIALIZED_NAME_EMBEDDABLE_BY)
  private String embeddableBy;

  public static final String SERIALIZED_NAME_GENRE = "genre";
  @SerializedName(SERIALIZED_NAME_GENRE)
  private String genre;

  public static final String SERIALIZED_NAME_LABEL_ID = "label_id";
  @SerializedName(SERIALIZED_NAME_LABEL_ID)
  private Integer labelId;

  public static final String SERIALIZED_NAME_LABEL_NAME = "label_name";
  @SerializedName(SERIALIZED_NAME_LABEL_NAME)
  private String labelName;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private String lastModified;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_PERMALINK = "permalink";
  @SerializedName(SERIALIZED_NAME_PERMALINK)
  private String permalink;

  public static final String SERIALIZED_NAME_PERMALINK_URL = "permalink_url";
  @SerializedName(SERIALIZED_NAME_PERMALINK_URL)
  private String permalinkUrl;

  public static final String SERIALIZED_NAME_PLAYLIST_TYPE = "playlist_type";
  @SerializedName(SERIALIZED_NAME_PLAYLIST_TYPE)
  private String playlistType;

  public static final String SERIALIZED_NAME_PURCHASE_TITLE = "purchase_title";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TITLE)
  private String purchaseTitle;

  public static final String SERIALIZED_NAME_PURCHASE_URL = "purchase_url";
  @SerializedName(SERIALIZED_NAME_PURCHASE_URL)
  private String purchaseUrl;

  public static final String SERIALIZED_NAME_RELEASE = "release";
  @SerializedName(SERIALIZED_NAME_RELEASE)
  private String release;

  public static final String SERIALIZED_NAME_RELEASE_DAY = "release_day";
  @SerializedName(SERIALIZED_NAME_RELEASE_DAY)
  private Integer releaseDay;

  public static final String SERIALIZED_NAME_RELEASE_MONTH = "release_month";
  @SerializedName(SERIALIZED_NAME_RELEASE_MONTH)
  private Integer releaseMonth;

  public static final String SERIALIZED_NAME_RELEASE_YEAR = "release_year";
  @SerializedName(SERIALIZED_NAME_RELEASE_YEAR)
  private Integer releaseYear;

  public static final String SERIALIZED_NAME_SHARING = "sharing";
  @SerializedName(SERIALIZED_NAME_SHARING)
  private String sharing;

  public static final String SERIALIZED_NAME_STREAMABLE = "streamable";
  @SerializedName(SERIALIZED_NAME_STREAMABLE)
  private Boolean streamable;

  public static final String SERIALIZED_NAME_TAG_LIST = "tag_list";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private String tagList;

  public static final String SERIALIZED_NAME_TRACK_COUNT = "track_count";
  @SerializedName(SERIALIZED_NAME_TRACK_COUNT)
  private Integer trackCount;

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private List<Track> tracks = null;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_LIKES_COUNT = "likes_count";
  @SerializedName(SERIALIZED_NAME_LIKES_COUNT)
  private Integer likesCount;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private TrackLabel label;

  public static final String SERIALIZED_NAME_TRACKS_URI = "tracks_uri";
  @SerializedName(SERIALIZED_NAME_TRACKS_URI)
  private String tracksUri;

  public Playlist() {
  }

  public Playlist tags(String tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

   /**
   * Tags.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tags.")

  public String getTags() {
    return tags;
  }


  public void setTags(String tags) {
    
    
    
    this.tags = tags;
  }


  public Playlist title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Playlist title.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist title.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Playlist description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Playlist description.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist description.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Playlist id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Playlist identifier.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist identifier.")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public Playlist kind(String kind) {
    
    
    
    
    this.kind = kind;
    return this;
  }

   /**
   * Type of Soundcloud object (playlist).
   * @return kind
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of Soundcloud object (playlist).")

  public String getKind() {
    return kind;
  }


  public void setKind(String kind) {
    
    
    
    this.kind = kind;
  }


  public Playlist artworkUrl(String artworkUrl) {
    
    
    
    
    this.artworkUrl = artworkUrl;
    return this;
  }

   /**
   * URL to a JPEG image.
   * @return artworkUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to a JPEG image.")

  public String getArtworkUrl() {
    return artworkUrl;
  }


  public void setArtworkUrl(String artworkUrl) {
    
    
    
    this.artworkUrl = artworkUrl;
  }


  public Playlist createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Created timestamp.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Created timestamp.")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public Playlist downloadable(Boolean downloadable) {
    
    
    
    
    this.downloadable = downloadable;
    return this;
  }

   /**
   * is downloadable.
   * @return downloadable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "is downloadable.")

  public Boolean getDownloadable() {
    return downloadable;
  }


  public void setDownloadable(Boolean downloadable) {
    
    
    
    this.downloadable = downloadable;
  }


  public Playlist duration(Integer duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * Playlist duration.
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist duration.")

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    
    
    
    this.duration = duration;
  }


  public Playlist ean(String ean) {
    
    
    
    
    this.ean = ean;
    return this;
  }

   /**
   * European Article Number.
   * @return ean
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "European Article Number.")

  public String getEan() {
    return ean;
  }


  public void setEan(String ean) {
    
    
    
    this.ean = ean;
  }


  public Playlist embeddableBy(String embeddableBy) {
    
    
    
    
    this.embeddableBy = embeddableBy;
    return this;
  }

   /**
   * Embeddable by.
   * @return embeddableBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Embeddable by.")

  public String getEmbeddableBy() {
    return embeddableBy;
  }


  public void setEmbeddableBy(String embeddableBy) {
    
    
    
    this.embeddableBy = embeddableBy;
  }


  public Playlist genre(String genre) {
    
    
    
    
    this.genre = genre;
    return this;
  }

   /**
   * Playlist genre.
   * @return genre
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist genre.")

  public String getGenre() {
    return genre;
  }


  public void setGenre(String genre) {
    
    
    
    this.genre = genre;
  }


  public Playlist labelId(Integer labelId) {
    
    
    
    
    this.labelId = labelId;
    return this;
  }

   /**
   * Label user identifier.
   * @return labelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Label user identifier.")

  public Integer getLabelId() {
    return labelId;
  }


  public void setLabelId(Integer labelId) {
    
    
    
    this.labelId = labelId;
  }


  public Playlist labelName(String labelName) {
    
    
    
    
    this.labelName = labelName;
    return this;
  }

   /**
   * Label name.
   * @return labelName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Label name.")

  public String getLabelName() {
    return labelName;
  }


  public void setLabelName(String labelName) {
    
    
    
    this.labelName = labelName;
  }


  public Playlist lastModified(String lastModified) {
    
    
    
    
    this.lastModified = lastModified;
    return this;
  }

   /**
   * Last modified timestamp.
   * @return lastModified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last modified timestamp.")

  public String getLastModified() {
    return lastModified;
  }


  public void setLastModified(String lastModified) {
    
    
    
    this.lastModified = lastModified;
  }


  public Playlist license(String license) {
    
    
    
    
    this.license = license;
    return this;
  }

   /**
   * License.
   * @return license
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "License.")

  public String getLicense() {
    return license;
  }


  public void setLicense(String license) {
    
    
    
    this.license = license;
  }


  public Playlist permalink(String permalink) {
    
    
    
    
    this.permalink = permalink;
    return this;
  }

   /**
   * Playlist permalink.
   * @return permalink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist permalink.")

  public String getPermalink() {
    return permalink;
  }


  public void setPermalink(String permalink) {
    
    
    
    this.permalink = permalink;
  }


  public Playlist permalinkUrl(String permalinkUrl) {
    
    
    
    
    this.permalinkUrl = permalinkUrl;
    return this;
  }

   /**
   * Playlist permalink URL.
   * @return permalinkUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist permalink URL.")

  public String getPermalinkUrl() {
    return permalinkUrl;
  }


  public void setPermalinkUrl(String permalinkUrl) {
    
    
    
    this.permalinkUrl = permalinkUrl;
  }


  public Playlist playlistType(String playlistType) {
    
    
    
    
    this.playlistType = playlistType;
    return this;
  }

   /**
   * Type of playlist.
   * @return playlistType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of playlist.")

  public String getPlaylistType() {
    return playlistType;
  }


  public void setPlaylistType(String playlistType) {
    
    
    
    this.playlistType = playlistType;
  }


  public Playlist purchaseTitle(String purchaseTitle) {
    
    
    
    
    this.purchaseTitle = purchaseTitle;
    return this;
  }

   /**
   * Purchase title.
   * @return purchaseTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase title.")

  public String getPurchaseTitle() {
    return purchaseTitle;
  }


  public void setPurchaseTitle(String purchaseTitle) {
    
    
    
    this.purchaseTitle = purchaseTitle;
  }


  public Playlist purchaseUrl(String purchaseUrl) {
    
    
    
    
    this.purchaseUrl = purchaseUrl;
    return this;
  }

   /**
   * Purchase URL.
   * @return purchaseUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase URL.")

  public String getPurchaseUrl() {
    return purchaseUrl;
  }


  public void setPurchaseUrl(String purchaseUrl) {
    
    
    
    this.purchaseUrl = purchaseUrl;
  }


  public Playlist release(String release) {
    
    
    
    
    this.release = release;
    return this;
  }

   /**
   * Release.
   * @return release
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Release.")

  public String getRelease() {
    return release;
  }


  public void setRelease(String release) {
    
    
    
    this.release = release;
  }


  public Playlist releaseDay(Integer releaseDay) {
    
    
    
    
    this.releaseDay = releaseDay;
    return this;
  }

   /**
   * Day of release.
   * @return releaseDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Day of release.")

  public Integer getReleaseDay() {
    return releaseDay;
  }


  public void setReleaseDay(Integer releaseDay) {
    
    
    
    this.releaseDay = releaseDay;
  }


  public Playlist releaseMonth(Integer releaseMonth) {
    
    
    
    
    this.releaseMonth = releaseMonth;
    return this;
  }

   /**
   * Month of release.
   * @return releaseMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Month of release.")

  public Integer getReleaseMonth() {
    return releaseMonth;
  }


  public void setReleaseMonth(Integer releaseMonth) {
    
    
    
    this.releaseMonth = releaseMonth;
  }


  public Playlist releaseYear(Integer releaseYear) {
    
    
    
    
    this.releaseYear = releaseYear;
    return this;
  }

   /**
   * Year of release.
   * @return releaseYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Year of release.")

  public Integer getReleaseYear() {
    return releaseYear;
  }


  public void setReleaseYear(Integer releaseYear) {
    
    
    
    this.releaseYear = releaseYear;
  }


  public Playlist sharing(String sharing) {
    
    
    
    
    this.sharing = sharing;
    return this;
  }

   /**
   * Type of sharing (private/public).
   * @return sharing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of sharing (private/public).")

  public String getSharing() {
    return sharing;
  }


  public void setSharing(String sharing) {
    
    
    
    this.sharing = sharing;
  }


  public Playlist streamable(Boolean streamable) {
    
    
    
    
    this.streamable = streamable;
    return this;
  }

   /**
   * Is streamable.
   * @return streamable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is streamable.")

  public Boolean getStreamable() {
    return streamable;
  }


  public void setStreamable(Boolean streamable) {
    
    
    
    this.streamable = streamable;
  }


  public Playlist tagList(String tagList) {
    
    
    
    
    this.tagList = tagList;
    return this;
  }

   /**
   * Tags.
   * @return tagList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tags.")

  public String getTagList() {
    return tagList;
  }


  public void setTagList(String tagList) {
    
    
    
    this.tagList = tagList;
  }


  public Playlist trackCount(Integer trackCount) {
    
    
    
    
    this.trackCount = trackCount;
    return this;
  }

   /**
   * Count of tracks.
   * @return trackCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of tracks.")

  public Integer getTrackCount() {
    return trackCount;
  }


  public void setTrackCount(Integer trackCount) {
    
    
    
    this.trackCount = trackCount;
  }


  public Playlist tracks(List<Track> tracks) {
    
    
    
    
    this.tracks = tracks;
    return this;
  }

  public Playlist addTracksItem(Track tracksItem) {
    if (this.tracks == null) {
      this.tracks = new ArrayList<>();
    }
    this.tracks.add(tracksItem);
    return this;
  }

   /**
   * List of tracks.
   * @return tracks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of tracks.")

  public List<Track> getTracks() {
    return tracks;
  }


  public void setTracks(List<Track> tracks) {
    
    
    
    this.tracks = tracks;
  }


  public Playlist type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Playlist type.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist type.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public Playlist uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * Playlist URI.
   * @return uri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist URI.")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }


  public Playlist user(User user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public User getUser() {
    return user;
  }


  public void setUser(User user) {
    
    
    
    this.user = user;
  }


  public Playlist userId(Integer userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * User identifier.
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User identifier.")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    
    
    
    this.userId = userId;
  }


  public Playlist likesCount(Integer likesCount) {
    
    
    
    
    this.likesCount = likesCount;
    return this;
  }

   /**
   * Count of playlist likes.
   * @return likesCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of playlist likes.")

  public Integer getLikesCount() {
    return likesCount;
  }


  public void setLikesCount(Integer likesCount) {
    
    
    
    this.likesCount = likesCount;
  }


  public Playlist label(TrackLabel label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TrackLabel getLabel() {
    return label;
  }


  public void setLabel(TrackLabel label) {
    
    
    
    this.label = label;
  }


  public Playlist tracksUri(String tracksUri) {
    
    
    
    
    this.tracksUri = tracksUri;
    return this;
  }

   /**
   * tracks URI.
   * @return tracksUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "tracks URI.")

  public String getTracksUri() {
    return tracksUri;
  }


  public void setTracksUri(String tracksUri) {
    
    
    
    this.tracksUri = tracksUri;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Playlist instance itself
   */
  public Playlist putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Playlist playlist = (Playlist) o;
    return Objects.equals(this.tags, playlist.tags) &&
        Objects.equals(this.title, playlist.title) &&
        Objects.equals(this.description, playlist.description) &&
        Objects.equals(this.id, playlist.id) &&
        Objects.equals(this.kind, playlist.kind) &&
        Objects.equals(this.artworkUrl, playlist.artworkUrl) &&
        Objects.equals(this.createdAt, playlist.createdAt) &&
        Objects.equals(this.downloadable, playlist.downloadable) &&
        Objects.equals(this.duration, playlist.duration) &&
        Objects.equals(this.ean, playlist.ean) &&
        Objects.equals(this.embeddableBy, playlist.embeddableBy) &&
        Objects.equals(this.genre, playlist.genre) &&
        Objects.equals(this.labelId, playlist.labelId) &&
        Objects.equals(this.labelName, playlist.labelName) &&
        Objects.equals(this.lastModified, playlist.lastModified) &&
        Objects.equals(this.license, playlist.license) &&
        Objects.equals(this.permalink, playlist.permalink) &&
        Objects.equals(this.permalinkUrl, playlist.permalinkUrl) &&
        Objects.equals(this.playlistType, playlist.playlistType) &&
        Objects.equals(this.purchaseTitle, playlist.purchaseTitle) &&
        Objects.equals(this.purchaseUrl, playlist.purchaseUrl) &&
        Objects.equals(this.release, playlist.release) &&
        Objects.equals(this.releaseDay, playlist.releaseDay) &&
        Objects.equals(this.releaseMonth, playlist.releaseMonth) &&
        Objects.equals(this.releaseYear, playlist.releaseYear) &&
        Objects.equals(this.sharing, playlist.sharing) &&
        Objects.equals(this.streamable, playlist.streamable) &&
        Objects.equals(this.tagList, playlist.tagList) &&
        Objects.equals(this.trackCount, playlist.trackCount) &&
        Objects.equals(this.tracks, playlist.tracks) &&
        Objects.equals(this.type, playlist.type) &&
        Objects.equals(this.uri, playlist.uri) &&
        Objects.equals(this.user, playlist.user) &&
        Objects.equals(this.userId, playlist.userId) &&
        Objects.equals(this.likesCount, playlist.likesCount) &&
        Objects.equals(this.label, playlist.label) &&
        Objects.equals(this.tracksUri, playlist.tracksUri)&&
        Objects.equals(this.additionalProperties, playlist.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, title, description, id, kind, artworkUrl, createdAt, downloadable, duration, ean, embeddableBy, genre, labelId, labelName, lastModified, license, permalink, permalinkUrl, playlistType, purchaseTitle, purchaseUrl, release, releaseDay, releaseMonth, releaseYear, sharing, streamable, tagList, trackCount, tracks, type, uri, user, userId, likesCount, label, tracksUri, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Playlist {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    artworkUrl: ").append(toIndentedString(artworkUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    downloadable: ").append(toIndentedString(downloadable)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    ean: ").append(toIndentedString(ean)).append("\n");
    sb.append("    embeddableBy: ").append(toIndentedString(embeddableBy)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("    labelId: ").append(toIndentedString(labelId)).append("\n");
    sb.append("    labelName: ").append(toIndentedString(labelName)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    permalink: ").append(toIndentedString(permalink)).append("\n");
    sb.append("    permalinkUrl: ").append(toIndentedString(permalinkUrl)).append("\n");
    sb.append("    playlistType: ").append(toIndentedString(playlistType)).append("\n");
    sb.append("    purchaseTitle: ").append(toIndentedString(purchaseTitle)).append("\n");
    sb.append("    purchaseUrl: ").append(toIndentedString(purchaseUrl)).append("\n");
    sb.append("    release: ").append(toIndentedString(release)).append("\n");
    sb.append("    releaseDay: ").append(toIndentedString(releaseDay)).append("\n");
    sb.append("    releaseMonth: ").append(toIndentedString(releaseMonth)).append("\n");
    sb.append("    releaseYear: ").append(toIndentedString(releaseYear)).append("\n");
    sb.append("    sharing: ").append(toIndentedString(sharing)).append("\n");
    sb.append("    streamable: ").append(toIndentedString(streamable)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    trackCount: ").append(toIndentedString(trackCount)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    likesCount: ").append(toIndentedString(likesCount)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    tracksUri: ").append(toIndentedString(tracksUri)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("artwork_url");
    openapiFields.add("created_at");
    openapiFields.add("downloadable");
    openapiFields.add("duration");
    openapiFields.add("ean");
    openapiFields.add("embeddable_by");
    openapiFields.add("genre");
    openapiFields.add("label_id");
    openapiFields.add("label_name");
    openapiFields.add("last_modified");
    openapiFields.add("license");
    openapiFields.add("permalink");
    openapiFields.add("permalink_url");
    openapiFields.add("playlist_type");
    openapiFields.add("purchase_title");
    openapiFields.add("purchase_url");
    openapiFields.add("release");
    openapiFields.add("release_day");
    openapiFields.add("release_month");
    openapiFields.add("release_year");
    openapiFields.add("sharing");
    openapiFields.add("streamable");
    openapiFields.add("tag_list");
    openapiFields.add("track_count");
    openapiFields.add("tracks");
    openapiFields.add("type");
    openapiFields.add("uri");
    openapiFields.add("user");
    openapiFields.add("user_id");
    openapiFields.add("likes_count");
    openapiFields.add("label");
    openapiFields.add("tracks_uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Playlist
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Playlist.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Playlist is not found in the empty JSON string", Playlist.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("tags").isJsonNull() && (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("artwork_url") != null && !jsonObj.get("artwork_url").isJsonNull()) && !jsonObj.get("artwork_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artwork_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artwork_url").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("ean") != null && !jsonObj.get("ean").isJsonNull()) && !jsonObj.get("ean").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ean` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ean").toString()));
      }
      if ((jsonObj.get("embeddable_by") != null && !jsonObj.get("embeddable_by").isJsonNull()) && !jsonObj.get("embeddable_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embeddable_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embeddable_by").toString()));
      }
      if ((jsonObj.get("genre") != null && !jsonObj.get("genre").isJsonNull()) && !jsonObj.get("genre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genre").toString()));
      }
      if ((jsonObj.get("label_name") != null && !jsonObj.get("label_name").isJsonNull()) && !jsonObj.get("label_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label_name").toString()));
      }
      if ((jsonObj.get("last_modified") != null && !jsonObj.get("last_modified").isJsonNull()) && !jsonObj.get("last_modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_modified").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("permalink") != null && !jsonObj.get("permalink").isJsonNull()) && !jsonObj.get("permalink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permalink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permalink").toString()));
      }
      if ((jsonObj.get("permalink_url") != null && !jsonObj.get("permalink_url").isJsonNull()) && !jsonObj.get("permalink_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permalink_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permalink_url").toString()));
      }
      if ((jsonObj.get("playlist_type") != null && !jsonObj.get("playlist_type").isJsonNull()) && !jsonObj.get("playlist_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playlist_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playlist_type").toString()));
      }
      if ((jsonObj.get("purchase_title") != null && !jsonObj.get("purchase_title").isJsonNull()) && !jsonObj.get("purchase_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_title").toString()));
      }
      if ((jsonObj.get("purchase_url") != null && !jsonObj.get("purchase_url").isJsonNull()) && !jsonObj.get("purchase_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_url").toString()));
      }
      if ((jsonObj.get("release") != null && !jsonObj.get("release").isJsonNull()) && !jsonObj.get("release").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release").toString()));
      }
      if ((jsonObj.get("sharing") != null && !jsonObj.get("sharing").isJsonNull()) && !jsonObj.get("sharing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharing").toString()));
      }
      if ((jsonObj.get("tag_list") != null && !jsonObj.get("tag_list").isJsonNull()) && !jsonObj.get("tag_list").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_list` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_list").toString()));
      }
      if (jsonObj.get("tracks") != null && !jsonObj.get("tracks").isJsonNull()) {
        JsonArray jsonArraytracks = jsonObj.getAsJsonArray("tracks");
        if (jsonArraytracks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracks` to be an array in the JSON string but got `%s`", jsonObj.get("tracks").toString()));
          }

          // validate the optional field `tracks` (array)
          for (int i = 0; i < jsonArraytracks.size(); i++) {
            Track.validateJsonObject(jsonArraytracks.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
      // validate the optional field `label`
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) {
        TrackLabel.validateJsonObject(jsonObj.getAsJsonObject("label"));
      }
      if (!jsonObj.get("tracks_uri").isJsonNull() && (jsonObj.get("tracks_uri") != null && !jsonObj.get("tracks_uri").isJsonNull()) && !jsonObj.get("tracks_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracks_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracks_uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Playlist.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Playlist' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Playlist> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Playlist.class));

       return (TypeAdapter<T>) new TypeAdapter<Playlist>() {
           @Override
           public void write(JsonWriter out, Playlist value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Playlist read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Playlist instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Playlist given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Playlist
  * @throws IOException if the JSON string is invalid with respect to Playlist
  */
  public static Playlist fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Playlist.class);
  }

 /**
  * Convert an instance of Playlist to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

