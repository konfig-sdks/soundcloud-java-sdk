/*
 * SoundCloud Public API Specification
 * Discover and play over 320 million music tracks. Join the world’s largest online community of artists, bands, DJs, and audio creators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.File;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TracksUploadNewTrackRequest1
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TracksUploadNewTrackRequest1 {
  public static final String SERIALIZED_NAME_TRACK_TITLE = "track[title]";
  @SerializedName(SERIALIZED_NAME_TRACK_TITLE)
  private String trackTitle;

  public static final String SERIALIZED_NAME_TRACK_ASSET_DATA = "track[asset_data]";
  @SerializedName(SERIALIZED_NAME_TRACK_ASSET_DATA)
  private File trackAssetData;

  public static final String SERIALIZED_NAME_TRACK_PERMALINK = "track[permalink]";
  @SerializedName(SERIALIZED_NAME_TRACK_PERMALINK)
  private String trackPermalink;

  /**
   * Gets or Sets trackSharing
   */
  @JsonAdapter(TrackSharingEnum.Adapter.class)
 public enum TrackSharingEnum {
    PUBLIC("public"),
    
    PRIVATE("private");

    private String value;

    TrackSharingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrackSharingEnum fromValue(String value) {
      for (TrackSharingEnum b : TrackSharingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrackSharingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrackSharingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrackSharingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrackSharingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRACK_SHARING = "track[sharing]";
  @SerializedName(SERIALIZED_NAME_TRACK_SHARING)
  private TrackSharingEnum trackSharing = TrackSharingEnum.PUBLIC;

  /**
   * who can embed this track \&quot;all\&quot;, \&quot;me\&quot;, or \&quot;none\&quot;
   */
  @JsonAdapter(TrackEmbeddableByEnum.Adapter.class)
 public enum TrackEmbeddableByEnum {
    ALL("all"),
    
    ME("me"),
    
    NONE("none");

    private String value;

    TrackEmbeddableByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrackEmbeddableByEnum fromValue(String value) {
      for (TrackEmbeddableByEnum b : TrackEmbeddableByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrackEmbeddableByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrackEmbeddableByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrackEmbeddableByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrackEmbeddableByEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRACK_EMBEDDABLE_BY = "track[embeddable_by]";
  @SerializedName(SERIALIZED_NAME_TRACK_EMBEDDABLE_BY)
  private TrackEmbeddableByEnum trackEmbeddableBy;

  public static final String SERIALIZED_NAME_TRACK_PURCHASE_URL = "track[purchase_url]";
  @SerializedName(SERIALIZED_NAME_TRACK_PURCHASE_URL)
  private String trackPurchaseUrl;

  public static final String SERIALIZED_NAME_TRACK_DESCRIPTION = "track[description]";
  @SerializedName(SERIALIZED_NAME_TRACK_DESCRIPTION)
  private String trackDescription;

  public static final String SERIALIZED_NAME_TRACK_GENRE = "track[genre]";
  @SerializedName(SERIALIZED_NAME_TRACK_GENRE)
  private String trackGenre;

  public static final String SERIALIZED_NAME_TRACK_TAG_LIST = "track[tag_list]";
  @SerializedName(SERIALIZED_NAME_TRACK_TAG_LIST)
  private String trackTagList;

  public static final String SERIALIZED_NAME_TRACK_LABEL_NAME = "track[label_name]";
  @SerializedName(SERIALIZED_NAME_TRACK_LABEL_NAME)
  private String trackLabelName;

  public static final String SERIALIZED_NAME_TRACK_RELEASE = "track[release]";
  @SerializedName(SERIALIZED_NAME_TRACK_RELEASE)
  private String trackRelease;

  public static final String SERIALIZED_NAME_TRACK_RELEASE_DATE = "track[release_date]";
  @SerializedName(SERIALIZED_NAME_TRACK_RELEASE_DATE)
  private String trackReleaseDate;

  public static final String SERIALIZED_NAME_TRACK_STREAMABLE = "track[streamable]";
  @SerializedName(SERIALIZED_NAME_TRACK_STREAMABLE)
  private Boolean trackStreamable = true;

  public static final String SERIALIZED_NAME_TRACK_DOWNLOADABLE = "track[downloadable]";
  @SerializedName(SERIALIZED_NAME_TRACK_DOWNLOADABLE)
  private Boolean trackDownloadable = true;

  /**
   * Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
   */
  @JsonAdapter(TrackLicenseEnum.Adapter.class)
 public enum TrackLicenseEnum {
    NO_RIGHTS_RESERVED("no-rights-reserved"),
    
    ALL_RIGHTS_RESERVED("all-rights-reserved"),
    
    CC_BY("cc-by"),
    
    CC_BY_NC("cc-by-nc"),
    
    CC_BY_ND("cc-by-nd"),
    
    CC_BY_SA("cc-by-sa"),
    
    CC_BY_NC_ND("cc-by-nc-nd"),
    
    CC_BY_NC_SA("cc-by-nc-sa");

    private String value;

    TrackLicenseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrackLicenseEnum fromValue(String value) {
      for (TrackLicenseEnum b : TrackLicenseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrackLicenseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrackLicenseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrackLicenseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrackLicenseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRACK_LICENSE = "track[license]";
  @SerializedName(SERIALIZED_NAME_TRACK_LICENSE)
  private TrackLicenseEnum trackLicense;

  public static final String SERIALIZED_NAME_TRACK_COMMENTABLE = "track[commentable]";
  @SerializedName(SERIALIZED_NAME_TRACK_COMMENTABLE)
  private Boolean trackCommentable = true;

  public static final String SERIALIZED_NAME_TRACK_ISRC = "track[isrc]";
  @SerializedName(SERIALIZED_NAME_TRACK_ISRC)
  private String trackIsrc;

  public static final String SERIALIZED_NAME_TRACK_ARTWORK_DATA = "track[artwork_data]";
  @SerializedName(SERIALIZED_NAME_TRACK_ARTWORK_DATA)
  private File trackArtworkData;

  public TracksUploadNewTrackRequest1() {
  }

  public TracksUploadNewTrackRequest1 trackTitle(String trackTitle) {
    
    
    
    
    this.trackTitle = trackTitle;
    return this;
  }

   /**
   * Get trackTitle
   * @return trackTitle
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getTrackTitle() {
    return trackTitle;
  }


  public void setTrackTitle(String trackTitle) {
    
    
    
    this.trackTitle = trackTitle;
  }


  public TracksUploadNewTrackRequest1 trackAssetData(File trackAssetData) {
    
    
    
    
    this.trackAssetData = trackAssetData;
    return this;
  }

   /**
   * Get trackAssetData
   * @return trackAssetData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public File getTrackAssetData() {
    return trackAssetData;
  }


  public void setTrackAssetData(File trackAssetData) {
    
    
    
    this.trackAssetData = trackAssetData;
  }


  public TracksUploadNewTrackRequest1 trackPermalink(String trackPermalink) {
    
    
    
    
    this.trackPermalink = trackPermalink;
    return this;
  }

   /**
   * Get trackPermalink
   * @return trackPermalink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTrackPermalink() {
    return trackPermalink;
  }


  public void setTrackPermalink(String trackPermalink) {
    
    
    
    this.trackPermalink = trackPermalink;
  }


  public TracksUploadNewTrackRequest1 trackSharing(TrackSharingEnum trackSharing) {
    
    
    
    
    this.trackSharing = trackSharing;
    return this;
  }

   /**
   * Get trackSharing
   * @return trackSharing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PUBLIC", value = "")

  public TrackSharingEnum getTrackSharing() {
    return trackSharing;
  }


  public void setTrackSharing(TrackSharingEnum trackSharing) {
    
    
    
    this.trackSharing = trackSharing;
  }


  public TracksUploadNewTrackRequest1 trackEmbeddableBy(TrackEmbeddableByEnum trackEmbeddableBy) {
    
    
    
    
    this.trackEmbeddableBy = trackEmbeddableBy;
    return this;
  }

   /**
   * who can embed this track \&quot;all\&quot;, \&quot;me\&quot;, or \&quot;none\&quot;
   * @return trackEmbeddableBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "who can embed this track \"all\", \"me\", or \"none\"")

  public TrackEmbeddableByEnum getTrackEmbeddableBy() {
    return trackEmbeddableBy;
  }


  public void setTrackEmbeddableBy(TrackEmbeddableByEnum trackEmbeddableBy) {
    
    
    
    this.trackEmbeddableBy = trackEmbeddableBy;
  }


  public TracksUploadNewTrackRequest1 trackPurchaseUrl(String trackPurchaseUrl) {
    
    
    
    
    this.trackPurchaseUrl = trackPurchaseUrl;
    return this;
  }

   /**
   * Get trackPurchaseUrl
   * @return trackPurchaseUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTrackPurchaseUrl() {
    return trackPurchaseUrl;
  }


  public void setTrackPurchaseUrl(String trackPurchaseUrl) {
    
    
    
    this.trackPurchaseUrl = trackPurchaseUrl;
  }


  public TracksUploadNewTrackRequest1 trackDescription(String trackDescription) {
    
    
    
    
    this.trackDescription = trackDescription;
    return this;
  }

   /**
   * Get trackDescription
   * @return trackDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTrackDescription() {
    return trackDescription;
  }


  public void setTrackDescription(String trackDescription) {
    
    
    
    this.trackDescription = trackDescription;
  }


  public TracksUploadNewTrackRequest1 trackGenre(String trackGenre) {
    
    
    
    
    this.trackGenre = trackGenre;
    return this;
  }

   /**
   * Get trackGenre
   * @return trackGenre
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTrackGenre() {
    return trackGenre;
  }


  public void setTrackGenre(String trackGenre) {
    
    
    
    this.trackGenre = trackGenre;
  }


  public TracksUploadNewTrackRequest1 trackTagList(String trackTagList) {
    
    
    
    
    this.trackTagList = trackTagList;
    return this;
  }

   /**
   * The tag_list property contains a list of tags separated by spaces. Multiword tags are quoted in double quotes. We also support machine tags that follow the pattern NAMESPACE:KEY&#x3D;VALUE. For example: geo:lat&#x3D;43.555 camel:size&#x3D;medium “machine:tag&#x3D;with space” Machine tags are not revealed to the user on the track pages.
   * @return trackTagList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tag_list property contains a list of tags separated by spaces. Multiword tags are quoted in double quotes. We also support machine tags that follow the pattern NAMESPACE:KEY=VALUE. For example: geo:lat=43.555 camel:size=medium “machine:tag=with space” Machine tags are not revealed to the user on the track pages.")

  public String getTrackTagList() {
    return trackTagList;
  }


  public void setTrackTagList(String trackTagList) {
    
    
    
    this.trackTagList = trackTagList;
  }


  public TracksUploadNewTrackRequest1 trackLabelName(String trackLabelName) {
    
    
    
    
    this.trackLabelName = trackLabelName;
    return this;
  }

   /**
   * Get trackLabelName
   * @return trackLabelName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTrackLabelName() {
    return trackLabelName;
  }


  public void setTrackLabelName(String trackLabelName) {
    
    
    
    this.trackLabelName = trackLabelName;
  }


  public TracksUploadNewTrackRequest1 trackRelease(String trackRelease) {
    
    
    
    
    this.trackRelease = trackRelease;
    return this;
  }

   /**
   * Get trackRelease
   * @return trackRelease
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTrackRelease() {
    return trackRelease;
  }


  public void setTrackRelease(String trackRelease) {
    
    
    
    this.trackRelease = trackRelease;
  }


  public TracksUploadNewTrackRequest1 trackReleaseDate(String trackReleaseDate) {
    
    
    
    
    this.trackReleaseDate = trackReleaseDate;
    return this;
  }

   /**
   * string, formatted as yyyy-mm-dd, representing release date
   * @return trackReleaseDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "string, formatted as yyyy-mm-dd, representing release date")

  public String getTrackReleaseDate() {
    return trackReleaseDate;
  }


  public void setTrackReleaseDate(String trackReleaseDate) {
    
    
    
    this.trackReleaseDate = trackReleaseDate;
  }


  public TracksUploadNewTrackRequest1 trackStreamable(Boolean trackStreamable) {
    
    
    
    
    this.trackStreamable = trackStreamable;
    return this;
  }

   /**
   * Get trackStreamable
   * @return trackStreamable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getTrackStreamable() {
    return trackStreamable;
  }


  public void setTrackStreamable(Boolean trackStreamable) {
    
    
    
    this.trackStreamable = trackStreamable;
  }


  public TracksUploadNewTrackRequest1 trackDownloadable(Boolean trackDownloadable) {
    
    
    
    
    this.trackDownloadable = trackDownloadable;
    return this;
  }

   /**
   * Get trackDownloadable
   * @return trackDownloadable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getTrackDownloadable() {
    return trackDownloadable;
  }


  public void setTrackDownloadable(Boolean trackDownloadable) {
    
    
    
    this.trackDownloadable = trackDownloadable;
  }


  public TracksUploadNewTrackRequest1 trackLicense(TrackLicenseEnum trackLicense) {
    
    
    
    
    this.trackLicense = trackLicense;
    return this;
  }

   /**
   * Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
   * @return trackLicense
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa")

  public TrackLicenseEnum getTrackLicense() {
    return trackLicense;
  }


  public void setTrackLicense(TrackLicenseEnum trackLicense) {
    
    
    
    this.trackLicense = trackLicense;
  }


  public TracksUploadNewTrackRequest1 trackCommentable(Boolean trackCommentable) {
    
    
    
    
    this.trackCommentable = trackCommentable;
    return this;
  }

   /**
   * Get trackCommentable
   * @return trackCommentable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getTrackCommentable() {
    return trackCommentable;
  }


  public void setTrackCommentable(Boolean trackCommentable) {
    
    
    
    this.trackCommentable = trackCommentable;
  }


  public TracksUploadNewTrackRequest1 trackIsrc(String trackIsrc) {
    
    
    
    
    this.trackIsrc = trackIsrc;
    return this;
  }

   /**
   * Get trackIsrc
   * @return trackIsrc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTrackIsrc() {
    return trackIsrc;
  }


  public void setTrackIsrc(String trackIsrc) {
    
    
    
    this.trackIsrc = trackIsrc;
  }


  public TracksUploadNewTrackRequest1 trackArtworkData(File trackArtworkData) {
    
    
    
    
    this.trackArtworkData = trackArtworkData;
    return this;
  }

   /**
   * Get trackArtworkData
   * @return trackArtworkData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public File getTrackArtworkData() {
    return trackArtworkData;
  }


  public void setTrackArtworkData(File trackArtworkData) {
    
    
    
    this.trackArtworkData = trackArtworkData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TracksUploadNewTrackRequest1 instance itself
   */
  public TracksUploadNewTrackRequest1 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TracksUploadNewTrackRequest1 tracksUploadNewTrackRequest1 = (TracksUploadNewTrackRequest1) o;
    return Objects.equals(this.trackTitle, tracksUploadNewTrackRequest1.trackTitle) &&
        Objects.equals(this.trackAssetData, tracksUploadNewTrackRequest1.trackAssetData) &&
        Objects.equals(this.trackPermalink, tracksUploadNewTrackRequest1.trackPermalink) &&
        Objects.equals(this.trackSharing, tracksUploadNewTrackRequest1.trackSharing) &&
        Objects.equals(this.trackEmbeddableBy, tracksUploadNewTrackRequest1.trackEmbeddableBy) &&
        Objects.equals(this.trackPurchaseUrl, tracksUploadNewTrackRequest1.trackPurchaseUrl) &&
        Objects.equals(this.trackDescription, tracksUploadNewTrackRequest1.trackDescription) &&
        Objects.equals(this.trackGenre, tracksUploadNewTrackRequest1.trackGenre) &&
        Objects.equals(this.trackTagList, tracksUploadNewTrackRequest1.trackTagList) &&
        Objects.equals(this.trackLabelName, tracksUploadNewTrackRequest1.trackLabelName) &&
        Objects.equals(this.trackRelease, tracksUploadNewTrackRequest1.trackRelease) &&
        Objects.equals(this.trackReleaseDate, tracksUploadNewTrackRequest1.trackReleaseDate) &&
        Objects.equals(this.trackStreamable, tracksUploadNewTrackRequest1.trackStreamable) &&
        Objects.equals(this.trackDownloadable, tracksUploadNewTrackRequest1.trackDownloadable) &&
        Objects.equals(this.trackLicense, tracksUploadNewTrackRequest1.trackLicense) &&
        Objects.equals(this.trackCommentable, tracksUploadNewTrackRequest1.trackCommentable) &&
        Objects.equals(this.trackIsrc, tracksUploadNewTrackRequest1.trackIsrc) &&
        Objects.equals(this.trackArtworkData, tracksUploadNewTrackRequest1.trackArtworkData)&&
        Objects.equals(this.additionalProperties, tracksUploadNewTrackRequest1.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trackTitle, trackAssetData, trackPermalink, trackSharing, trackEmbeddableBy, trackPurchaseUrl, trackDescription, trackGenre, trackTagList, trackLabelName, trackRelease, trackReleaseDate, trackStreamable, trackDownloadable, trackLicense, trackCommentable, trackIsrc, trackArtworkData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TracksUploadNewTrackRequest1 {\n");
    sb.append("    trackTitle: ").append(toIndentedString(trackTitle)).append("\n");
    sb.append("    trackAssetData: ").append(toIndentedString(trackAssetData)).append("\n");
    sb.append("    trackPermalink: ").append(toIndentedString(trackPermalink)).append("\n");
    sb.append("    trackSharing: ").append(toIndentedString(trackSharing)).append("\n");
    sb.append("    trackEmbeddableBy: ").append(toIndentedString(trackEmbeddableBy)).append("\n");
    sb.append("    trackPurchaseUrl: ").append(toIndentedString(trackPurchaseUrl)).append("\n");
    sb.append("    trackDescription: ").append(toIndentedString(trackDescription)).append("\n");
    sb.append("    trackGenre: ").append(toIndentedString(trackGenre)).append("\n");
    sb.append("    trackTagList: ").append(toIndentedString(trackTagList)).append("\n");
    sb.append("    trackLabelName: ").append(toIndentedString(trackLabelName)).append("\n");
    sb.append("    trackRelease: ").append(toIndentedString(trackRelease)).append("\n");
    sb.append("    trackReleaseDate: ").append(toIndentedString(trackReleaseDate)).append("\n");
    sb.append("    trackStreamable: ").append(toIndentedString(trackStreamable)).append("\n");
    sb.append("    trackDownloadable: ").append(toIndentedString(trackDownloadable)).append("\n");
    sb.append("    trackLicense: ").append(toIndentedString(trackLicense)).append("\n");
    sb.append("    trackCommentable: ").append(toIndentedString(trackCommentable)).append("\n");
    sb.append("    trackIsrc: ").append(toIndentedString(trackIsrc)).append("\n");
    sb.append("    trackArtworkData: ").append(toIndentedString(trackArtworkData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("track[title]");
    openapiFields.add("track[asset_data]");
    openapiFields.add("track[permalink]");
    openapiFields.add("track[sharing]");
    openapiFields.add("track[embeddable_by]");
    openapiFields.add("track[purchase_url]");
    openapiFields.add("track[description]");
    openapiFields.add("track[genre]");
    openapiFields.add("track[tag_list]");
    openapiFields.add("track[label_name]");
    openapiFields.add("track[release]");
    openapiFields.add("track[release_date]");
    openapiFields.add("track[streamable]");
    openapiFields.add("track[downloadable]");
    openapiFields.add("track[license]");
    openapiFields.add("track[commentable]");
    openapiFields.add("track[isrc]");
    openapiFields.add("track[artwork_data]");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("track[title]");
    openapiRequiredFields.add("track[asset_data]");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TracksUploadNewTrackRequest1
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TracksUploadNewTrackRequest1.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TracksUploadNewTrackRequest1 is not found in the empty JSON string", TracksUploadNewTrackRequest1.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TracksUploadNewTrackRequest1.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("track[title]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track[title]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track[title]").toString()));
      }
      if ((jsonObj.get("track[permalink]") != null && !jsonObj.get("track[permalink]").isJsonNull()) && !jsonObj.get("track[permalink]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track[permalink]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track[permalink]").toString()));
      }
      if ((jsonObj.get("track[sharing]") != null && !jsonObj.get("track[sharing]").isJsonNull()) && !jsonObj.get("track[sharing]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track[sharing]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track[sharing]").toString()));
      }
      if ((jsonObj.get("track[embeddable_by]") != null && !jsonObj.get("track[embeddable_by]").isJsonNull()) && !jsonObj.get("track[embeddable_by]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track[embeddable_by]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track[embeddable_by]").toString()));
      }
      if ((jsonObj.get("track[purchase_url]") != null && !jsonObj.get("track[purchase_url]").isJsonNull()) && !jsonObj.get("track[purchase_url]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track[purchase_url]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track[purchase_url]").toString()));
      }
      if ((jsonObj.get("track[description]") != null && !jsonObj.get("track[description]").isJsonNull()) && !jsonObj.get("track[description]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track[description]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track[description]").toString()));
      }
      if ((jsonObj.get("track[genre]") != null && !jsonObj.get("track[genre]").isJsonNull()) && !jsonObj.get("track[genre]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track[genre]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track[genre]").toString()));
      }
      if ((jsonObj.get("track[tag_list]") != null && !jsonObj.get("track[tag_list]").isJsonNull()) && !jsonObj.get("track[tag_list]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track[tag_list]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track[tag_list]").toString()));
      }
      if ((jsonObj.get("track[label_name]") != null && !jsonObj.get("track[label_name]").isJsonNull()) && !jsonObj.get("track[label_name]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track[label_name]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track[label_name]").toString()));
      }
      if ((jsonObj.get("track[release]") != null && !jsonObj.get("track[release]").isJsonNull()) && !jsonObj.get("track[release]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track[release]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track[release]").toString()));
      }
      if ((jsonObj.get("track[release_date]") != null && !jsonObj.get("track[release_date]").isJsonNull()) && !jsonObj.get("track[release_date]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track[release_date]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track[release_date]").toString()));
      }
      if ((jsonObj.get("track[license]") != null && !jsonObj.get("track[license]").isJsonNull()) && !jsonObj.get("track[license]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track[license]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track[license]").toString()));
      }
      if ((jsonObj.get("track[isrc]") != null && !jsonObj.get("track[isrc]").isJsonNull()) && !jsonObj.get("track[isrc]").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `track[isrc]` to be a primitive type in the JSON string but got `%s`", jsonObj.get("track[isrc]").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TracksUploadNewTrackRequest1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TracksUploadNewTrackRequest1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TracksUploadNewTrackRequest1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TracksUploadNewTrackRequest1.class));

       return (TypeAdapter<T>) new TypeAdapter<TracksUploadNewTrackRequest1>() {
           @Override
           public void write(JsonWriter out, TracksUploadNewTrackRequest1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TracksUploadNewTrackRequest1 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TracksUploadNewTrackRequest1 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TracksUploadNewTrackRequest1 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TracksUploadNewTrackRequest1
  * @throws IOException if the JSON string is invalid with respect to TracksUploadNewTrackRequest1
  */
  public static TracksUploadNewTrackRequest1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TracksUploadNewTrackRequest1.class);
  }

 /**
  * Convert an instance of TracksUploadNewTrackRequest1 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

