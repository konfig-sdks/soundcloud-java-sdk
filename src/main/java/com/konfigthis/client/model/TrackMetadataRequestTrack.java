/*
 * SoundCloud Public API Specification
 * Discover and play over 320 million music tracks. Join the world’s largest online community of artists, bands, DJs, and audio creators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TrackMetadataRequestTrack
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TrackMetadataRequestTrack {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PERMALINK = "permalink";
  @SerializedName(SERIALIZED_NAME_PERMALINK)
  private String permalink;

  /**
   * Gets or Sets sharing
   */
  @JsonAdapter(SharingEnum.Adapter.class)
 public enum SharingEnum {
    PUBLIC("public"),
    
    PRIVATE("private");

    private String value;

    SharingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SharingEnum fromValue(String value) {
      for (SharingEnum b : SharingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SharingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SharingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SharingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SharingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SHARING = "sharing";
  @SerializedName(SERIALIZED_NAME_SHARING)
  private SharingEnum sharing = SharingEnum.PUBLIC;

  /**
   * who can embed this track \&quot;all\&quot;, \&quot;me\&quot;, or \&quot;none\&quot;
   */
  @JsonAdapter(EmbeddableByEnum.Adapter.class)
 public enum EmbeddableByEnum {
    ALL("all"),
    
    ME("me"),
    
    NONE("none");

    private String value;

    EmbeddableByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmbeddableByEnum fromValue(String value) {
      for (EmbeddableByEnum b : EmbeddableByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmbeddableByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmbeddableByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmbeddableByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmbeddableByEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMBEDDABLE_BY = "embeddable_by";
  @SerializedName(SERIALIZED_NAME_EMBEDDABLE_BY)
  private EmbeddableByEnum embeddableBy;

  public static final String SERIALIZED_NAME_PURCHASE_URL = "purchase_url";
  @SerializedName(SERIALIZED_NAME_PURCHASE_URL)
  private String purchaseUrl;

  public static final String SERIALIZED_NAME_GENRE = "genre";
  @SerializedName(SERIALIZED_NAME_GENRE)
  private String genre;

  public static final String SERIALIZED_NAME_TAG_LIST = "tag_list";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private String tagList;

  public static final String SERIALIZED_NAME_LABEL_NAME = "label_name";
  @SerializedName(SERIALIZED_NAME_LABEL_NAME)
  private String labelName;

  public static final String SERIALIZED_NAME_RELEASE = "release";
  @SerializedName(SERIALIZED_NAME_RELEASE)
  private String release;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "release_date";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private String releaseDate;

  public static final String SERIALIZED_NAME_STREAMABLE = "streamable";
  @SerializedName(SERIALIZED_NAME_STREAMABLE)
  private Boolean streamable = true;

  public static final String SERIALIZED_NAME_DOWNLOADABLE = "downloadable";
  @SerializedName(SERIALIZED_NAME_DOWNLOADABLE)
  private Boolean downloadable = true;

  /**
   * Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
   */
  @JsonAdapter(LicenseEnum.Adapter.class)
 public enum LicenseEnum {
    NO_RIGHTS_RESERVED("no-rights-reserved"),
    
    ALL_RIGHTS_RESERVED("all-rights-reserved"),
    
    CC_BY("cc-by"),
    
    CC_BY_NC("cc-by-nc"),
    
    CC_BY_ND("cc-by-nd"),
    
    CC_BY_SA("cc-by-sa"),
    
    CC_BY_NC_ND("cc-by-nc-nd"),
    
    CC_BY_NC_SA("cc-by-nc-sa");

    private String value;

    LicenseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseEnum fromValue(String value) {
      for (LicenseEnum b : LicenseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicenseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicenseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LicenseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private LicenseEnum license;

  public static final String SERIALIZED_NAME_COMMENTABLE = "commentable";
  @SerializedName(SERIALIZED_NAME_COMMENTABLE)
  private Boolean commentable = true;

  public static final String SERIALIZED_NAME_ISRC = "isrc";
  @SerializedName(SERIALIZED_NAME_ISRC)
  private String isrc;

  public TrackMetadataRequestTrack() {
  }

  public TrackMetadataRequestTrack title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public TrackMetadataRequestTrack description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public TrackMetadataRequestTrack permalink(String permalink) {
    
    
    
    
    this.permalink = permalink;
    return this;
  }

   /**
   * Get permalink
   * @return permalink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPermalink() {
    return permalink;
  }


  public void setPermalink(String permalink) {
    
    
    
    this.permalink = permalink;
  }


  public TrackMetadataRequestTrack sharing(SharingEnum sharing) {
    
    
    
    
    this.sharing = sharing;
    return this;
  }

   /**
   * Get sharing
   * @return sharing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PUBLIC", value = "")

  public SharingEnum getSharing() {
    return sharing;
  }


  public void setSharing(SharingEnum sharing) {
    
    
    
    this.sharing = sharing;
  }


  public TrackMetadataRequestTrack embeddableBy(EmbeddableByEnum embeddableBy) {
    
    
    
    
    this.embeddableBy = embeddableBy;
    return this;
  }

   /**
   * who can embed this track \&quot;all\&quot;, \&quot;me\&quot;, or \&quot;none\&quot;
   * @return embeddableBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "who can embed this track \"all\", \"me\", or \"none\"")

  public EmbeddableByEnum getEmbeddableBy() {
    return embeddableBy;
  }


  public void setEmbeddableBy(EmbeddableByEnum embeddableBy) {
    
    
    
    this.embeddableBy = embeddableBy;
  }


  public TrackMetadataRequestTrack purchaseUrl(String purchaseUrl) {
    
    
    
    
    this.purchaseUrl = purchaseUrl;
    return this;
  }

   /**
   * Get purchaseUrl
   * @return purchaseUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPurchaseUrl() {
    return purchaseUrl;
  }


  public void setPurchaseUrl(String purchaseUrl) {
    
    
    
    this.purchaseUrl = purchaseUrl;
  }


  public TrackMetadataRequestTrack genre(String genre) {
    
    
    
    
    this.genre = genre;
    return this;
  }

   /**
   * Get genre
   * @return genre
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGenre() {
    return genre;
  }


  public void setGenre(String genre) {
    
    
    
    this.genre = genre;
  }


  public TrackMetadataRequestTrack tagList(String tagList) {
    
    
    
    
    this.tagList = tagList;
    return this;
  }

   /**
   * The tag_list property contains a list of tags separated by spaces. Multiword tags are quoted in double quotes. We also support machine tags that follow the pattern NAMESPACE:KEY&#x3D;VALUE. For example: geo:lat&#x3D;43.555 camel:size&#x3D;medium “machine:tag&#x3D;with space” Machine tags are not revealed to the user on the track pages.
   * @return tagList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tag_list property contains a list of tags separated by spaces. Multiword tags are quoted in double quotes. We also support machine tags that follow the pattern NAMESPACE:KEY=VALUE. For example: geo:lat=43.555 camel:size=medium “machine:tag=with space” Machine tags are not revealed to the user on the track pages.")

  public String getTagList() {
    return tagList;
  }


  public void setTagList(String tagList) {
    
    
    
    this.tagList = tagList;
  }


  public TrackMetadataRequestTrack labelName(String labelName) {
    
    
    
    
    this.labelName = labelName;
    return this;
  }

   /**
   * Get labelName
   * @return labelName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLabelName() {
    return labelName;
  }


  public void setLabelName(String labelName) {
    
    
    
    this.labelName = labelName;
  }


  public TrackMetadataRequestTrack release(String release) {
    
    
    
    
    this.release = release;
    return this;
  }

   /**
   * Get release
   * @return release
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRelease() {
    return release;
  }


  public void setRelease(String release) {
    
    
    
    this.release = release;
  }


  public TrackMetadataRequestTrack releaseDate(String releaseDate) {
    
    
    
    
    this.releaseDate = releaseDate;
    return this;
  }

   /**
   * string, formatted as yyyy-mm-dd, representing release date
   * @return releaseDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "string, formatted as yyyy-mm-dd, representing release date")

  public String getReleaseDate() {
    return releaseDate;
  }


  public void setReleaseDate(String releaseDate) {
    
    
    
    this.releaseDate = releaseDate;
  }


  public TrackMetadataRequestTrack streamable(Boolean streamable) {
    
    
    
    
    this.streamable = streamable;
    return this;
  }

   /**
   * Get streamable
   * @return streamable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getStreamable() {
    return streamable;
  }


  public void setStreamable(Boolean streamable) {
    
    
    
    this.streamable = streamable;
  }


  public TrackMetadataRequestTrack downloadable(Boolean downloadable) {
    
    
    
    
    this.downloadable = downloadable;
    return this;
  }

   /**
   * Get downloadable
   * @return downloadable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getDownloadable() {
    return downloadable;
  }


  public void setDownloadable(Boolean downloadable) {
    
    
    
    this.downloadable = downloadable;
  }


  public TrackMetadataRequestTrack license(LicenseEnum license) {
    
    
    
    
    this.license = license;
    return this;
  }

   /**
   * Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa
   * @return license
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Possible values: no-rights-reserved, all-rights-reserved, cc-by, cc-by-nc, cc-by-nd, cc-by-sa, cc-by-nc-nd, cc-by-nc-sa")

  public LicenseEnum getLicense() {
    return license;
  }


  public void setLicense(LicenseEnum license) {
    
    
    
    this.license = license;
  }


  public TrackMetadataRequestTrack commentable(Boolean commentable) {
    
    
    
    
    this.commentable = commentable;
    return this;
  }

   /**
   * Get commentable
   * @return commentable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "")

  public Boolean getCommentable() {
    return commentable;
  }


  public void setCommentable(Boolean commentable) {
    
    
    
    this.commentable = commentable;
  }


  public TrackMetadataRequestTrack isrc(String isrc) {
    
    
    
    
    this.isrc = isrc;
    return this;
  }

   /**
   * Get isrc
   * @return isrc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIsrc() {
    return isrc;
  }


  public void setIsrc(String isrc) {
    
    
    
    this.isrc = isrc;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TrackMetadataRequestTrack instance itself
   */
  public TrackMetadataRequestTrack putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackMetadataRequestTrack trackMetadataRequestTrack = (TrackMetadataRequestTrack) o;
    return Objects.equals(this.title, trackMetadataRequestTrack.title) &&
        Objects.equals(this.description, trackMetadataRequestTrack.description) &&
        Objects.equals(this.permalink, trackMetadataRequestTrack.permalink) &&
        Objects.equals(this.sharing, trackMetadataRequestTrack.sharing) &&
        Objects.equals(this.embeddableBy, trackMetadataRequestTrack.embeddableBy) &&
        Objects.equals(this.purchaseUrl, trackMetadataRequestTrack.purchaseUrl) &&
        Objects.equals(this.genre, trackMetadataRequestTrack.genre) &&
        Objects.equals(this.tagList, trackMetadataRequestTrack.tagList) &&
        Objects.equals(this.labelName, trackMetadataRequestTrack.labelName) &&
        Objects.equals(this.release, trackMetadataRequestTrack.release) &&
        Objects.equals(this.releaseDate, trackMetadataRequestTrack.releaseDate) &&
        Objects.equals(this.streamable, trackMetadataRequestTrack.streamable) &&
        Objects.equals(this.downloadable, trackMetadataRequestTrack.downloadable) &&
        Objects.equals(this.license, trackMetadataRequestTrack.license) &&
        Objects.equals(this.commentable, trackMetadataRequestTrack.commentable) &&
        Objects.equals(this.isrc, trackMetadataRequestTrack.isrc)&&
        Objects.equals(this.additionalProperties, trackMetadataRequestTrack.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, permalink, sharing, embeddableBy, purchaseUrl, genre, tagList, labelName, release, releaseDate, streamable, downloadable, license, commentable, isrc, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackMetadataRequestTrack {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    permalink: ").append(toIndentedString(permalink)).append("\n");
    sb.append("    sharing: ").append(toIndentedString(sharing)).append("\n");
    sb.append("    embeddableBy: ").append(toIndentedString(embeddableBy)).append("\n");
    sb.append("    purchaseUrl: ").append(toIndentedString(purchaseUrl)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    labelName: ").append(toIndentedString(labelName)).append("\n");
    sb.append("    release: ").append(toIndentedString(release)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    streamable: ").append(toIndentedString(streamable)).append("\n");
    sb.append("    downloadable: ").append(toIndentedString(downloadable)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    commentable: ").append(toIndentedString(commentable)).append("\n");
    sb.append("    isrc: ").append(toIndentedString(isrc)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("permalink");
    openapiFields.add("sharing");
    openapiFields.add("embeddable_by");
    openapiFields.add("purchase_url");
    openapiFields.add("genre");
    openapiFields.add("tag_list");
    openapiFields.add("label_name");
    openapiFields.add("release");
    openapiFields.add("release_date");
    openapiFields.add("streamable");
    openapiFields.add("downloadable");
    openapiFields.add("license");
    openapiFields.add("commentable");
    openapiFields.add("isrc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrackMetadataRequestTrack
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TrackMetadataRequestTrack.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackMetadataRequestTrack is not found in the empty JSON string", TrackMetadataRequestTrack.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("permalink") != null && !jsonObj.get("permalink").isJsonNull()) && !jsonObj.get("permalink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permalink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permalink").toString()));
      }
      if ((jsonObj.get("sharing") != null && !jsonObj.get("sharing").isJsonNull()) && !jsonObj.get("sharing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharing").toString()));
      }
      if ((jsonObj.get("embeddable_by") != null && !jsonObj.get("embeddable_by").isJsonNull()) && !jsonObj.get("embeddable_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embeddable_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embeddable_by").toString()));
      }
      if ((jsonObj.get("purchase_url") != null && !jsonObj.get("purchase_url").isJsonNull()) && !jsonObj.get("purchase_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_url").toString()));
      }
      if ((jsonObj.get("genre") != null && !jsonObj.get("genre").isJsonNull()) && !jsonObj.get("genre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genre").toString()));
      }
      if ((jsonObj.get("tag_list") != null && !jsonObj.get("tag_list").isJsonNull()) && !jsonObj.get("tag_list").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_list` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_list").toString()));
      }
      if ((jsonObj.get("label_name") != null && !jsonObj.get("label_name").isJsonNull()) && !jsonObj.get("label_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label_name").toString()));
      }
      if ((jsonObj.get("release") != null && !jsonObj.get("release").isJsonNull()) && !jsonObj.get("release").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release").toString()));
      }
      if ((jsonObj.get("release_date") != null && !jsonObj.get("release_date").isJsonNull()) && !jsonObj.get("release_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_date").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("isrc") != null && !jsonObj.get("isrc").isJsonNull()) && !jsonObj.get("isrc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isrc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isrc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackMetadataRequestTrack.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackMetadataRequestTrack' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackMetadataRequestTrack> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackMetadataRequestTrack.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackMetadataRequestTrack>() {
           @Override
           public void write(JsonWriter out, TrackMetadataRequestTrack value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackMetadataRequestTrack read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TrackMetadataRequestTrack instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrackMetadataRequestTrack given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrackMetadataRequestTrack
  * @throws IOException if the JSON string is invalid with respect to TrackMetadataRequestTrack
  */
  public static TrackMetadataRequestTrack fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackMetadataRequestTrack.class);
  }

 /**
  * Convert an instance of TrackMetadataRequestTrack to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

