/*
 * SoundCloud Public API Specification
 * Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Track;
import com.konfigthis.client.model.TrackLabel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Soundcloud Track object.
 */
@ApiModel(description = "Soundcloud Track object.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TP {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ARTWORK_URL = "artwork_url";
  @SerializedName(SERIALIZED_NAME_ARTWORK_URL)
  private String artworkUrl;

  public static final String SERIALIZED_NAME_BPM = "bpm";
  @SerializedName(SERIALIZED_NAME_BPM)
  private Integer bpm;

  public static final String SERIALIZED_NAME_COMMENT_COUNT = "comment_count";
  @SerializedName(SERIALIZED_NAME_COMMENT_COUNT)
  private Integer commentCount;

  public static final String SERIALIZED_NAME_COMMENTABLE = "commentable";
  @SerializedName(SERIALIZED_NAME_COMMENTABLE)
  private Boolean commentable;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DOWNLOAD_COUNT = "download_count";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_COUNT)
  private Integer downloadCount;

  public static final String SERIALIZED_NAME_DOWNLOADABLE = "downloadable";
  @SerializedName(SERIALIZED_NAME_DOWNLOADABLE)
  private Object downloadable = null;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_EMBEDDABLE_BY = "embeddable_by";
  @SerializedName(SERIALIZED_NAME_EMBEDDABLE_BY)
  private String embeddableBy;

  public static final String SERIALIZED_NAME_FAVORITINGS_COUNT = "favoritings_count";
  @SerializedName(SERIALIZED_NAME_FAVORITINGS_COUNT)
  private Integer favoritingsCount;

  public static final String SERIALIZED_NAME_GENRE = "genre";
  @SerializedName(SERIALIZED_NAME_GENRE)
  private String genre;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ISRC = "isrc";
  @SerializedName(SERIALIZED_NAME_ISRC)
  private String isrc;

  public static final String SERIALIZED_NAME_KEY_SIGNATURE = "key_signature";
  @SerializedName(SERIALIZED_NAME_KEY_SIGNATURE)
  private String keySignature;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LABEL_NAME = "label_name";
  @SerializedName(SERIALIZED_NAME_LABEL_NAME)
  private String labelName;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_PERMALINK_URL = "permalink_url";
  @SerializedName(SERIALIZED_NAME_PERMALINK_URL)
  private String permalinkUrl;

  public static final String SERIALIZED_NAME_PLAYBACK_COUNT = "playback_count";
  @SerializedName(SERIALIZED_NAME_PLAYBACK_COUNT)
  private Integer playbackCount;

  public static final String SERIALIZED_NAME_PURCHASE_TITLE = "purchase_title";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TITLE)
  private String purchaseTitle;

  public static final String SERIALIZED_NAME_PURCHASE_URL = "purchase_url";
  @SerializedName(SERIALIZED_NAME_PURCHASE_URL)
  private String purchaseUrl;

  public static final String SERIALIZED_NAME_RELEASE = "release";
  @SerializedName(SERIALIZED_NAME_RELEASE)
  private String release;

  public static final String SERIALIZED_NAME_RELEASE_DAY = "release_day";
  @SerializedName(SERIALIZED_NAME_RELEASE_DAY)
  private Integer releaseDay;

  public static final String SERIALIZED_NAME_RELEASE_MONTH = "release_month";
  @SerializedName(SERIALIZED_NAME_RELEASE_MONTH)
  private Integer releaseMonth;

  public static final String SERIALIZED_NAME_RELEASE_YEAR = "release_year";
  @SerializedName(SERIALIZED_NAME_RELEASE_YEAR)
  private Integer releaseYear;

  public static final String SERIALIZED_NAME_SHARING = "sharing";
  @SerializedName(SERIALIZED_NAME_SHARING)
  private String sharing;

  public static final String SERIALIZED_NAME_STREAM_URL = "stream_url";
  @SerializedName(SERIALIZED_NAME_STREAM_URL)
  private String streamUrl;

  public static final String SERIALIZED_NAME_STREAMABLE = "streamable";
  @SerializedName(SERIALIZED_NAME_STREAMABLE)
  private Boolean streamable;

  public static final String SERIALIZED_NAME_TAG_LIST = "tag_list";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private String tagList;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private Object user = null;

  public static final String SERIALIZED_NAME_USER_FAVORITE = "user_favorite";
  @SerializedName(SERIALIZED_NAME_USER_FAVORITE)
  private Boolean userFavorite;

  public static final String SERIALIZED_NAME_USER_PLAYBACK_COUNT = "user_playback_count";
  @SerializedName(SERIALIZED_NAME_USER_PLAYBACK_COUNT)
  private Integer userPlaybackCount;

  public static final String SERIALIZED_NAME_WAVEFORM_URL = "waveform_url";
  @SerializedName(SERIALIZED_NAME_WAVEFORM_URL)
  private String waveformUrl;

  public static final String SERIALIZED_NAME_AVAILABLE_COUNTRY_CODES = "available_country_codes";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_COUNTRY_CODES)
  private String availableCountryCodes;

  /**
   * Level of access the user (logged in or anonymous) has to the track.   * &#x60;playable&#x60; - user is allowed to listen to a full track.   * &#x60;preview&#x60; - user is allowed to preview a track, meaning a snippet is available   * &#x60;blocked&#x60; - user can only see the metadata of a track, no streaming is possible 
   */
  @JsonAdapter(AccessEnum.Adapter.class)
 public enum AccessEnum {
    PLAYABLE("playable"),
    
    PREVIEW("preview"),
    
    BLOCKED("blocked");

    private String value;

    AccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessEnum fromValue(String value) {
      for (AccessEnum b : AccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private AccessEnum access;

  public static final String SERIALIZED_NAME_DOWNLOAD_URL = "download_url";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URL)
  private String downloadUrl;

  public static final String SERIALIZED_NAME_REPOSTS_COUNT = "reposts_count";
  @SerializedName(SERIALIZED_NAME_REPOSTS_COUNT)
  private Integer repostsCount;

  public static final String SERIALIZED_NAME_SECRET_URI = "secret_uri";
  @SerializedName(SERIALIZED_NAME_SECRET_URI)
  private String secretUri;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private String tags;

  public static final String SERIALIZED_NAME_EAN = "ean";
  @SerializedName(SERIALIZED_NAME_EAN)
  private String ean;

  public static final String SERIALIZED_NAME_LABEL_ID = "label_id";
  @SerializedName(SERIALIZED_NAME_LABEL_ID)
  private Integer labelId;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private String lastModified;

  public static final String SERIALIZED_NAME_PERMALINK = "permalink";
  @SerializedName(SERIALIZED_NAME_PERMALINK)
  private String permalink;

  public static final String SERIALIZED_NAME_PLAYLIST_TYPE = "playlist_type";
  @SerializedName(SERIALIZED_NAME_PLAYLIST_TYPE)
  private String playlistType;

  public static final String SERIALIZED_NAME_TRACK_COUNT = "track_count";
  @SerializedName(SERIALIZED_NAME_TRACK_COUNT)
  private Integer trackCount;

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private List<Track> tracks = null;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_LIKES_COUNT = "likes_count";
  @SerializedName(SERIALIZED_NAME_LIKES_COUNT)
  private Integer likesCount;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private TrackLabel label;

  public static final String SERIALIZED_NAME_TRACKS_URI = "tracks_uri";
  @SerializedName(SERIALIZED_NAME_TRACKS_URI)
  private String tracksUri;

  public TP() {
  }

  public TP title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Track title.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Track title.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public TP description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Track description.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Track description.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public TP artworkUrl(String artworkUrl) {
    
    
    
    
    this.artworkUrl = artworkUrl;
    return this;
  }

   /**
   * URL to a JPEG image.
   * @return artworkUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to a JPEG image.")

  public String getArtworkUrl() {
    return artworkUrl;
  }


  public void setArtworkUrl(String artworkUrl) {
    
    
    
    this.artworkUrl = artworkUrl;
  }


  public TP bpm(Integer bpm) {
    
    
    
    
    this.bpm = bpm;
    return this;
  }

   /**
   * Tempo.
   * @return bpm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tempo.")

  public Integer getBpm() {
    return bpm;
  }


  public void setBpm(Integer bpm) {
    
    
    
    this.bpm = bpm;
  }


  public TP commentCount(Integer commentCount) {
    
    
    
    
    this.commentCount = commentCount;
    return this;
  }

   /**
   * Number of comments.
   * @return commentCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of comments.")

  public Integer getCommentCount() {
    return commentCount;
  }


  public void setCommentCount(Integer commentCount) {
    
    
    
    this.commentCount = commentCount;
  }


  public TP commentable(Boolean commentable) {
    
    
    
    
    this.commentable = commentable;
    return this;
  }

   /**
   * Is commentable.
   * @return commentable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is commentable.")

  public Boolean getCommentable() {
    return commentable;
  }


  public void setCommentable(Boolean commentable) {
    
    
    
    this.commentable = commentable;
  }


  public TP createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Created timestamp.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Created timestamp.")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public TP downloadCount(Integer downloadCount) {
    
    
    
    
    this.downloadCount = downloadCount;
    return this;
  }

   /**
   * NUmber of downloads.
   * @return downloadCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "NUmber of downloads.")

  public Integer getDownloadCount() {
    return downloadCount;
  }


  public void setDownloadCount(Integer downloadCount) {
    
    
    
    this.downloadCount = downloadCount;
  }


  public TP downloadable(Object downloadable) {
    
    
    
    
    this.downloadable = downloadable;
    return this;
  }

   /**
   * Get downloadable
   * @return downloadable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getDownloadable() {
    return downloadable;
  }


  public void setDownloadable(Object downloadable) {
    
    
    
    this.downloadable = downloadable;
  }


  public TP duration(Integer duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * Track duration.
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Track duration.")

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    
    
    
    this.duration = duration;
  }


  public TP embeddableBy(String embeddableBy) {
    
    
    
    
    this.embeddableBy = embeddableBy;
    return this;
  }

   /**
   * Embeddable by.
   * @return embeddableBy
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Embeddable by.")

  public String getEmbeddableBy() {
    return embeddableBy;
  }


  public void setEmbeddableBy(String embeddableBy) {
    
    
    
    this.embeddableBy = embeddableBy;
  }


  public TP favoritingsCount(Integer favoritingsCount) {
    
    
    
    
    this.favoritingsCount = favoritingsCount;
    return this;
  }

   /**
   * Number of favoritings.
   * @return favoritingsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of favoritings.")

  public Integer getFavoritingsCount() {
    return favoritingsCount;
  }


  public void setFavoritingsCount(Integer favoritingsCount) {
    
    
    
    this.favoritingsCount = favoritingsCount;
  }


  public TP genre(String genre) {
    
    
    
    
    this.genre = genre;
    return this;
  }

   /**
   * Genre
   * @return genre
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Genre")

  public String getGenre() {
    return genre;
  }


  public void setGenre(String genre) {
    
    
    
    this.genre = genre;
  }


  public TP id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Track identifier.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Track identifier.")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public TP isrc(String isrc) {
    
    
    
    
    this.isrc = isrc;
    return this;
  }

   /**
   * ISRC code.
   * @return isrc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISRC code.")

  public String getIsrc() {
    return isrc;
  }


  public void setIsrc(String isrc) {
    
    
    
    this.isrc = isrc;
  }


  public TP keySignature(String keySignature) {
    
    
    
    
    this.keySignature = keySignature;
    return this;
  }

   /**
   * Key signature.
   * @return keySignature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Key signature.")

  public String getKeySignature() {
    return keySignature;
  }


  public void setKeySignature(String keySignature) {
    
    
    
    this.keySignature = keySignature;
  }


  public TP kind(String kind) {
    
    
    
    
    this.kind = kind;
    return this;
  }

   /**
   * Type of object (track).
   * @return kind
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of object (track).")

  public String getKind() {
    return kind;
  }


  public void setKind(String kind) {
    
    
    
    this.kind = kind;
  }


  public TP labelName(String labelName) {
    
    
    
    
    this.labelName = labelName;
    return this;
  }

   /**
   * Label user name.
   * @return labelName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Label user name.")

  public String getLabelName() {
    return labelName;
  }


  public void setLabelName(String labelName) {
    
    
    
    this.labelName = labelName;
  }


  public TP license(String license) {
    
    
    
    
    this.license = license;
    return this;
  }

   /**
   * License
   * @return license
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "License")

  public String getLicense() {
    return license;
  }


  public void setLicense(String license) {
    
    
    
    this.license = license;
  }


  public TP permalinkUrl(String permalinkUrl) {
    
    
    
    
    this.permalinkUrl = permalinkUrl;
    return this;
  }

   /**
   * Permalink URL.
   * @return permalinkUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Permalink URL.")

  public String getPermalinkUrl() {
    return permalinkUrl;
  }


  public void setPermalinkUrl(String permalinkUrl) {
    
    
    
    this.permalinkUrl = permalinkUrl;
  }


  public TP playbackCount(Integer playbackCount) {
    
    
    
    
    this.playbackCount = playbackCount;
    return this;
  }

   /**
   * Number of plays.
   * @return playbackCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of plays.")

  public Integer getPlaybackCount() {
    return playbackCount;
  }


  public void setPlaybackCount(Integer playbackCount) {
    
    
    
    this.playbackCount = playbackCount;
  }


  public TP purchaseTitle(String purchaseTitle) {
    
    
    
    
    this.purchaseTitle = purchaseTitle;
    return this;
  }

   /**
   * Purchase title.
   * @return purchaseTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase title.")

  public String getPurchaseTitle() {
    return purchaseTitle;
  }


  public void setPurchaseTitle(String purchaseTitle) {
    
    
    
    this.purchaseTitle = purchaseTitle;
  }


  public TP purchaseUrl(String purchaseUrl) {
    
    
    
    
    this.purchaseUrl = purchaseUrl;
    return this;
  }

   /**
   * Purchase URL.
   * @return purchaseUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase URL.")

  public String getPurchaseUrl() {
    return purchaseUrl;
  }


  public void setPurchaseUrl(String purchaseUrl) {
    
    
    
    this.purchaseUrl = purchaseUrl;
  }


  public TP release(String release) {
    
    
    
    
    this.release = release;
    return this;
  }

   /**
   * Release.
   * @return release
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Release.")

  public String getRelease() {
    return release;
  }


  public void setRelease(String release) {
    
    
    
    this.release = release;
  }


  public TP releaseDay(Integer releaseDay) {
    
    
    
    
    this.releaseDay = releaseDay;
    return this;
  }

   /**
   * Day of release.
   * @return releaseDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Day of release.")

  public Integer getReleaseDay() {
    return releaseDay;
  }


  public void setReleaseDay(Integer releaseDay) {
    
    
    
    this.releaseDay = releaseDay;
  }


  public TP releaseMonth(Integer releaseMonth) {
    
    
    
    
    this.releaseMonth = releaseMonth;
    return this;
  }

   /**
   * Month of release.
   * @return releaseMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Month of release.")

  public Integer getReleaseMonth() {
    return releaseMonth;
  }


  public void setReleaseMonth(Integer releaseMonth) {
    
    
    
    this.releaseMonth = releaseMonth;
  }


  public TP releaseYear(Integer releaseYear) {
    
    
    
    
    this.releaseYear = releaseYear;
    return this;
  }

   /**
   * Year of release.
   * @return releaseYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Year of release.")

  public Integer getReleaseYear() {
    return releaseYear;
  }


  public void setReleaseYear(Integer releaseYear) {
    
    
    
    this.releaseYear = releaseYear;
  }


  public TP sharing(String sharing) {
    
    
    
    
    this.sharing = sharing;
    return this;
  }

   /**
   * Type of sharing (public/private).
   * @return sharing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of sharing (public/private).")

  public String getSharing() {
    return sharing;
  }


  public void setSharing(String sharing) {
    
    
    
    this.sharing = sharing;
  }


  public TP streamUrl(String streamUrl) {
    
    
    
    
    this.streamUrl = streamUrl;
    return this;
  }

   /**
   * URL to stream.
   * @return streamUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to stream.")

  public String getStreamUrl() {
    return streamUrl;
  }


  public void setStreamUrl(String streamUrl) {
    
    
    
    this.streamUrl = streamUrl;
  }


  public TP streamable(Boolean streamable) {
    
    
    
    
    this.streamable = streamable;
    return this;
  }

   /**
   * Is streamable.
   * @return streamable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is streamable.")

  public Boolean getStreamable() {
    return streamable;
  }


  public void setStreamable(Boolean streamable) {
    
    
    
    this.streamable = streamable;
  }


  public TP tagList(String tagList) {
    
    
    
    
    this.tagList = tagList;
    return this;
  }

   /**
   * Tags.
   * @return tagList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tags.")

  public String getTagList() {
    return tagList;
  }


  public void setTagList(String tagList) {
    
    
    
    this.tagList = tagList;
  }


  public TP uri(String uri) {
    
    
    
    
    this.uri = uri;
    return this;
  }

   /**
   * Track URI.
   * @return uri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Track URI.")

  public String getUri() {
    return uri;
  }


  public void setUri(String uri) {
    
    
    
    this.uri = uri;
  }


  public TP user(Object user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getUser() {
    return user;
  }


  public void setUser(Object user) {
    
    
    
    this.user = user;
  }


  public TP userFavorite(Boolean userFavorite) {
    
    
    
    
    this.userFavorite = userFavorite;
    return this;
  }

   /**
   * Is user&#39;s favourite.
   * @return userFavorite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is user's favourite.")

  public Boolean getUserFavorite() {
    return userFavorite;
  }


  public void setUserFavorite(Boolean userFavorite) {
    
    
    
    this.userFavorite = userFavorite;
  }


  public TP userPlaybackCount(Integer userPlaybackCount) {
    
    
    
    
    this.userPlaybackCount = userPlaybackCount;
    return this;
  }

   /**
   * Number of plays by a user.
   * @return userPlaybackCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of plays by a user.")

  public Integer getUserPlaybackCount() {
    return userPlaybackCount;
  }


  public void setUserPlaybackCount(Integer userPlaybackCount) {
    
    
    
    this.userPlaybackCount = userPlaybackCount;
  }


  public TP waveformUrl(String waveformUrl) {
    
    
    
    
    this.waveformUrl = waveformUrl;
    return this;
  }

   /**
   * Waveform URL.
   * @return waveformUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Waveform URL.")

  public String getWaveformUrl() {
    return waveformUrl;
  }


  public void setWaveformUrl(String waveformUrl) {
    
    
    
    this.waveformUrl = waveformUrl;
  }


  public TP availableCountryCodes(String availableCountryCodes) {
    
    
    
    
    this.availableCountryCodes = availableCountryCodes;
    return this;
  }

   /**
   * List of countries where track is available.
   * @return availableCountryCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of countries where track is available.")

  public String getAvailableCountryCodes() {
    return availableCountryCodes;
  }


  public void setAvailableCountryCodes(String availableCountryCodes) {
    
    
    
    this.availableCountryCodes = availableCountryCodes;
  }


  public TP access(AccessEnum access) {
    
    
    
    
    this.access = access;
    return this;
  }

   /**
   * Level of access the user (logged in or anonymous) has to the track.   * &#x60;playable&#x60; - user is allowed to listen to a full track.   * &#x60;preview&#x60; - user is allowed to preview a track, meaning a snippet is available   * &#x60;blocked&#x60; - user can only see the metadata of a track, no streaming is possible 
   * @return access
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Level of access the user (logged in or anonymous) has to the track.   * `playable` - user is allowed to listen to a full track.   * `preview` - user is allowed to preview a track, meaning a snippet is available   * `blocked` - user can only see the metadata of a track, no streaming is possible ")

  public AccessEnum getAccess() {
    return access;
  }


  public void setAccess(AccessEnum access) {
    
    
    
    this.access = access;
  }


  public TP downloadUrl(String downloadUrl) {
    
    
    
    
    this.downloadUrl = downloadUrl;
    return this;
  }

   /**
   * URL to download a track.
   * @return downloadUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to download a track.")

  public String getDownloadUrl() {
    return downloadUrl;
  }


  public void setDownloadUrl(String downloadUrl) {
    
    
    
    this.downloadUrl = downloadUrl;
  }


  public TP repostsCount(Integer repostsCount) {
    
    
    
    
    this.repostsCount = repostsCount;
    return this;
  }

   /**
   * Number of reposts.
   * @return repostsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of reposts.")

  public Integer getRepostsCount() {
    return repostsCount;
  }


  public void setRepostsCount(Integer repostsCount) {
    
    
    
    this.repostsCount = repostsCount;
  }


  public TP secretUri(String secretUri) {
    
    
    
    
    this.secretUri = secretUri;
    return this;
  }

   /**
   * Secret URL.
   * @return secretUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Secret URL.")

  public String getSecretUri() {
    return secretUri;
  }


  public void setSecretUri(String secretUri) {
    
    
    
    this.secretUri = secretUri;
  }


  public TP tags(String tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

   /**
   * Tags.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tags.")

  public String getTags() {
    return tags;
  }


  public void setTags(String tags) {
    
    
    
    this.tags = tags;
  }


  public TP ean(String ean) {
    
    
    
    
    this.ean = ean;
    return this;
  }

   /**
   * European Article Number.
   * @return ean
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "European Article Number.")

  public String getEan() {
    return ean;
  }


  public void setEan(String ean) {
    
    
    
    this.ean = ean;
  }


  public TP labelId(Integer labelId) {
    
    
    
    
    this.labelId = labelId;
    return this;
  }

   /**
   * Label user identifier.
   * @return labelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Label user identifier.")

  public Integer getLabelId() {
    return labelId;
  }


  public void setLabelId(Integer labelId) {
    
    
    
    this.labelId = labelId;
  }


  public TP lastModified(String lastModified) {
    
    
    
    
    this.lastModified = lastModified;
    return this;
  }

   /**
   * Last modified timestamp.
   * @return lastModified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last modified timestamp.")

  public String getLastModified() {
    return lastModified;
  }


  public void setLastModified(String lastModified) {
    
    
    
    this.lastModified = lastModified;
  }


  public TP permalink(String permalink) {
    
    
    
    
    this.permalink = permalink;
    return this;
  }

   /**
   * Playlist permalink.
   * @return permalink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist permalink.")

  public String getPermalink() {
    return permalink;
  }


  public void setPermalink(String permalink) {
    
    
    
    this.permalink = permalink;
  }


  public TP playlistType(String playlistType) {
    
    
    
    
    this.playlistType = playlistType;
    return this;
  }

   /**
   * Type of playlist.
   * @return playlistType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of playlist.")

  public String getPlaylistType() {
    return playlistType;
  }


  public void setPlaylistType(String playlistType) {
    
    
    
    this.playlistType = playlistType;
  }


  public TP trackCount(Integer trackCount) {
    
    
    
    
    this.trackCount = trackCount;
    return this;
  }

   /**
   * Count of tracks.
   * @return trackCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of tracks.")

  public Integer getTrackCount() {
    return trackCount;
  }


  public void setTrackCount(Integer trackCount) {
    
    
    
    this.trackCount = trackCount;
  }


  public TP tracks(List<Track> tracks) {
    
    
    
    
    this.tracks = tracks;
    return this;
  }

  public TP addTracksItem(Track tracksItem) {
    if (this.tracks == null) {
      this.tracks = new ArrayList<>();
    }
    this.tracks.add(tracksItem);
    return this;
  }

   /**
   * List of tracks.
   * @return tracks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of tracks.")

  public List<Track> getTracks() {
    return tracks;
  }


  public void setTracks(List<Track> tracks) {
    
    
    
    this.tracks = tracks;
  }


  public TP type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Playlist type.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist type.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public TP userId(Integer userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * User identifier.
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User identifier.")

  public Integer getUserId() {
    return userId;
  }


  public void setUserId(Integer userId) {
    
    
    
    this.userId = userId;
  }


  public TP likesCount(Integer likesCount) {
    
    
    
    
    this.likesCount = likesCount;
    return this;
  }

   /**
   * Count of playlist likes.
   * @return likesCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Count of playlist likes.")

  public Integer getLikesCount() {
    return likesCount;
  }


  public void setLikesCount(Integer likesCount) {
    
    
    
    this.likesCount = likesCount;
  }


  public TP label(TrackLabel label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TrackLabel getLabel() {
    return label;
  }


  public void setLabel(TrackLabel label) {
    
    
    
    this.label = label;
  }


  public TP tracksUri(String tracksUri) {
    
    
    
    
    this.tracksUri = tracksUri;
    return this;
  }

   /**
   * tracks URI.
   * @return tracksUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "tracks URI.")

  public String getTracksUri() {
    return tracksUri;
  }


  public void setTracksUri(String tracksUri) {
    
    
    
    this.tracksUri = tracksUri;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TP instance itself
   */
  public TP putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TP TP = (TP) o;
    return Objects.equals(this.title, TP.title) &&
        Objects.equals(this.description, TP.description) &&
        Objects.equals(this.artworkUrl, TP.artworkUrl) &&
        Objects.equals(this.bpm, TP.bpm) &&
        Objects.equals(this.commentCount, TP.commentCount) &&
        Objects.equals(this.commentable, TP.commentable) &&
        Objects.equals(this.createdAt, TP.createdAt) &&
        Objects.equals(this.downloadCount, TP.downloadCount) &&
        Objects.equals(this.downloadable, TP.downloadable) &&
        Objects.equals(this.duration, TP.duration) &&
        Objects.equals(this.embeddableBy, TP.embeddableBy) &&
        Objects.equals(this.favoritingsCount, TP.favoritingsCount) &&
        Objects.equals(this.genre, TP.genre) &&
        Objects.equals(this.id, TP.id) &&
        Objects.equals(this.isrc, TP.isrc) &&
        Objects.equals(this.keySignature, TP.keySignature) &&
        Objects.equals(this.kind, TP.kind) &&
        Objects.equals(this.labelName, TP.labelName) &&
        Objects.equals(this.license, TP.license) &&
        Objects.equals(this.permalinkUrl, TP.permalinkUrl) &&
        Objects.equals(this.playbackCount, TP.playbackCount) &&
        Objects.equals(this.purchaseTitle, TP.purchaseTitle) &&
        Objects.equals(this.purchaseUrl, TP.purchaseUrl) &&
        Objects.equals(this.release, TP.release) &&
        Objects.equals(this.releaseDay, TP.releaseDay) &&
        Objects.equals(this.releaseMonth, TP.releaseMonth) &&
        Objects.equals(this.releaseYear, TP.releaseYear) &&
        Objects.equals(this.sharing, TP.sharing) &&
        Objects.equals(this.streamUrl, TP.streamUrl) &&
        Objects.equals(this.streamable, TP.streamable) &&
        Objects.equals(this.tagList, TP.tagList) &&
        Objects.equals(this.uri, TP.uri) &&
        Objects.equals(this.user, TP.user) &&
        Objects.equals(this.userFavorite, TP.userFavorite) &&
        Objects.equals(this.userPlaybackCount, TP.userPlaybackCount) &&
        Objects.equals(this.waveformUrl, TP.waveformUrl) &&
        Objects.equals(this.availableCountryCodes, TP.availableCountryCodes) &&
        Objects.equals(this.access, TP.access) &&
        Objects.equals(this.downloadUrl, TP.downloadUrl) &&
        Objects.equals(this.repostsCount, TP.repostsCount) &&
        Objects.equals(this.secretUri, TP.secretUri) &&
        Objects.equals(this.tags, TP.tags) &&
        Objects.equals(this.ean, TP.ean) &&
        Objects.equals(this.labelId, TP.labelId) &&
        Objects.equals(this.lastModified, TP.lastModified) &&
        Objects.equals(this.permalink, TP.permalink) &&
        Objects.equals(this.playlistType, TP.playlistType) &&
        Objects.equals(this.trackCount, TP.trackCount) &&
        Objects.equals(this.tracks, TP.tracks) &&
        Objects.equals(this.type, TP.type) &&
        Objects.equals(this.userId, TP.userId) &&
        Objects.equals(this.likesCount, TP.likesCount) &&
        Objects.equals(this.label, TP.label) &&
        Objects.equals(this.tracksUri, TP.tracksUri)&&
        Objects.equals(this.additionalProperties, TP.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, artworkUrl, bpm, commentCount, commentable, createdAt, downloadCount, downloadable, duration, embeddableBy, favoritingsCount, genre, id, isrc, keySignature, kind, labelName, license, permalinkUrl, playbackCount, purchaseTitle, purchaseUrl, release, releaseDay, releaseMonth, releaseYear, sharing, streamUrl, streamable, tagList, uri, user, userFavorite, userPlaybackCount, waveformUrl, availableCountryCodes, access, downloadUrl, repostsCount, secretUri, tags, ean, labelId, lastModified, permalink, playlistType, trackCount, tracks, type, userId, likesCount, label, tracksUri, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TP {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    artworkUrl: ").append(toIndentedString(artworkUrl)).append("\n");
    sb.append("    bpm: ").append(toIndentedString(bpm)).append("\n");
    sb.append("    commentCount: ").append(toIndentedString(commentCount)).append("\n");
    sb.append("    commentable: ").append(toIndentedString(commentable)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    downloadCount: ").append(toIndentedString(downloadCount)).append("\n");
    sb.append("    downloadable: ").append(toIndentedString(downloadable)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    embeddableBy: ").append(toIndentedString(embeddableBy)).append("\n");
    sb.append("    favoritingsCount: ").append(toIndentedString(favoritingsCount)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isrc: ").append(toIndentedString(isrc)).append("\n");
    sb.append("    keySignature: ").append(toIndentedString(keySignature)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    labelName: ").append(toIndentedString(labelName)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    permalinkUrl: ").append(toIndentedString(permalinkUrl)).append("\n");
    sb.append("    playbackCount: ").append(toIndentedString(playbackCount)).append("\n");
    sb.append("    purchaseTitle: ").append(toIndentedString(purchaseTitle)).append("\n");
    sb.append("    purchaseUrl: ").append(toIndentedString(purchaseUrl)).append("\n");
    sb.append("    release: ").append(toIndentedString(release)).append("\n");
    sb.append("    releaseDay: ").append(toIndentedString(releaseDay)).append("\n");
    sb.append("    releaseMonth: ").append(toIndentedString(releaseMonth)).append("\n");
    sb.append("    releaseYear: ").append(toIndentedString(releaseYear)).append("\n");
    sb.append("    sharing: ").append(toIndentedString(sharing)).append("\n");
    sb.append("    streamUrl: ").append(toIndentedString(streamUrl)).append("\n");
    sb.append("    streamable: ").append(toIndentedString(streamable)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userFavorite: ").append(toIndentedString(userFavorite)).append("\n");
    sb.append("    userPlaybackCount: ").append(toIndentedString(userPlaybackCount)).append("\n");
    sb.append("    waveformUrl: ").append(toIndentedString(waveformUrl)).append("\n");
    sb.append("    availableCountryCodes: ").append(toIndentedString(availableCountryCodes)).append("\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    repostsCount: ").append(toIndentedString(repostsCount)).append("\n");
    sb.append("    secretUri: ").append(toIndentedString(secretUri)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    ean: ").append(toIndentedString(ean)).append("\n");
    sb.append("    labelId: ").append(toIndentedString(labelId)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    permalink: ").append(toIndentedString(permalink)).append("\n");
    sb.append("    playlistType: ").append(toIndentedString(playlistType)).append("\n");
    sb.append("    trackCount: ").append(toIndentedString(trackCount)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    likesCount: ").append(toIndentedString(likesCount)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    tracksUri: ").append(toIndentedString(tracksUri)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("artwork_url");
    openapiFields.add("bpm");
    openapiFields.add("comment_count");
    openapiFields.add("commentable");
    openapiFields.add("created_at");
    openapiFields.add("download_count");
    openapiFields.add("downloadable");
    openapiFields.add("duration");
    openapiFields.add("embeddable_by");
    openapiFields.add("favoritings_count");
    openapiFields.add("genre");
    openapiFields.add("id");
    openapiFields.add("isrc");
    openapiFields.add("key_signature");
    openapiFields.add("kind");
    openapiFields.add("label_name");
    openapiFields.add("license");
    openapiFields.add("permalink_url");
    openapiFields.add("playback_count");
    openapiFields.add("purchase_title");
    openapiFields.add("purchase_url");
    openapiFields.add("release");
    openapiFields.add("release_day");
    openapiFields.add("release_month");
    openapiFields.add("release_year");
    openapiFields.add("sharing");
    openapiFields.add("stream_url");
    openapiFields.add("streamable");
    openapiFields.add("tag_list");
    openapiFields.add("uri");
    openapiFields.add("user");
    openapiFields.add("user_favorite");
    openapiFields.add("user_playback_count");
    openapiFields.add("waveform_url");
    openapiFields.add("available_country_codes");
    openapiFields.add("access");
    openapiFields.add("download_url");
    openapiFields.add("reposts_count");
    openapiFields.add("secret_uri");
    openapiFields.add("tags");
    openapiFields.add("ean");
    openapiFields.add("label_id");
    openapiFields.add("last_modified");
    openapiFields.add("permalink");
    openapiFields.add("playlist_type");
    openapiFields.add("track_count");
    openapiFields.add("tracks");
    openapiFields.add("type");
    openapiFields.add("user_id");
    openapiFields.add("likes_count");
    openapiFields.add("label");
    openapiFields.add("tracks_uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TP
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TP.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TP is not found in the empty JSON string", TP.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("artwork_url") != null && !jsonObj.get("artwork_url").isJsonNull()) && !jsonObj.get("artwork_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artwork_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artwork_url").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("embeddable_by") != null && !jsonObj.get("embeddable_by").isJsonNull()) && !jsonObj.get("embeddable_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embeddable_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embeddable_by").toString()));
      }
      if ((jsonObj.get("genre") != null && !jsonObj.get("genre").isJsonNull()) && !jsonObj.get("genre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genre").toString()));
      }
      if ((jsonObj.get("isrc") != null && !jsonObj.get("isrc").isJsonNull()) && !jsonObj.get("isrc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isrc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isrc").toString()));
      }
      if ((jsonObj.get("key_signature") != null && !jsonObj.get("key_signature").isJsonNull()) && !jsonObj.get("key_signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_signature").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("label_name") != null && !jsonObj.get("label_name").isJsonNull()) && !jsonObj.get("label_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label_name").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("permalink_url") != null && !jsonObj.get("permalink_url").isJsonNull()) && !jsonObj.get("permalink_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permalink_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permalink_url").toString()));
      }
      if ((jsonObj.get("purchase_title") != null && !jsonObj.get("purchase_title").isJsonNull()) && !jsonObj.get("purchase_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_title").toString()));
      }
      if ((jsonObj.get("purchase_url") != null && !jsonObj.get("purchase_url").isJsonNull()) && !jsonObj.get("purchase_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_url").toString()));
      }
      if ((jsonObj.get("release") != null && !jsonObj.get("release").isJsonNull()) && !jsonObj.get("release").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release").toString()));
      }
      if ((jsonObj.get("sharing") != null && !jsonObj.get("sharing").isJsonNull()) && !jsonObj.get("sharing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharing").toString()));
      }
      if ((jsonObj.get("stream_url") != null && !jsonObj.get("stream_url").isJsonNull()) && !jsonObj.get("stream_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stream_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stream_url").toString()));
      }
      if ((jsonObj.get("tag_list") != null && !jsonObj.get("tag_list").isJsonNull()) && !jsonObj.get("tag_list").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_list` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_list").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
      if ((jsonObj.get("waveform_url") != null && !jsonObj.get("waveform_url").isJsonNull()) && !jsonObj.get("waveform_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `waveform_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("waveform_url").toString()));
      }
      if ((jsonObj.get("available_country_codes") != null && !jsonObj.get("available_country_codes").isJsonNull()) && !jsonObj.get("available_country_codes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_country_codes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("available_country_codes").toString()));
      }
      if (!jsonObj.get("access").isJsonNull() && (jsonObj.get("access") != null && !jsonObj.get("access").isJsonNull()) && !jsonObj.get("access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access").toString()));
      }
      if ((jsonObj.get("download_url") != null && !jsonObj.get("download_url").isJsonNull()) && !jsonObj.get("download_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_url").toString()));
      }
      if ((jsonObj.get("secret_uri") != null && !jsonObj.get("secret_uri").isJsonNull()) && !jsonObj.get("secret_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_uri").toString()));
      }
      if (!jsonObj.get("tags").isJsonNull() && (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) && !jsonObj.get("tags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("ean") != null && !jsonObj.get("ean").isJsonNull()) && !jsonObj.get("ean").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ean` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ean").toString()));
      }
      if ((jsonObj.get("last_modified") != null && !jsonObj.get("last_modified").isJsonNull()) && !jsonObj.get("last_modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_modified").toString()));
      }
      if ((jsonObj.get("permalink") != null && !jsonObj.get("permalink").isJsonNull()) && !jsonObj.get("permalink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permalink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permalink").toString()));
      }
      if ((jsonObj.get("playlist_type") != null && !jsonObj.get("playlist_type").isJsonNull()) && !jsonObj.get("playlist_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playlist_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playlist_type").toString()));
      }
      if (jsonObj.get("tracks") != null && !jsonObj.get("tracks").isJsonNull()) {
        JsonArray jsonArraytracks = jsonObj.getAsJsonArray("tracks");
        if (jsonArraytracks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracks` to be an array in the JSON string but got `%s`", jsonObj.get("tracks").toString()));
          }

          // validate the optional field `tracks` (array)
          for (int i = 0; i < jsonArraytracks.size(); i++) {
            Track.validateJsonObject(jsonArraytracks.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `label`
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) {
        TrackLabel.validateJsonObject(jsonObj.getAsJsonObject("label"));
      }
      if (!jsonObj.get("tracks_uri").isJsonNull() && (jsonObj.get("tracks_uri") != null && !jsonObj.get("tracks_uri").isJsonNull()) && !jsonObj.get("tracks_uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracks_uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracks_uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TP.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TP' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TP> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TP.class));

       return (TypeAdapter<T>) new TypeAdapter<TP>() {
           @Override
           public void write(JsonWriter out, TP value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TP read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TP instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TP given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TP
  * @throws IOException if the JSON string is invalid with respect to TP
  */
  public static TP fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TP.class);
  }

 /**
  * Convert an instance of TP to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

