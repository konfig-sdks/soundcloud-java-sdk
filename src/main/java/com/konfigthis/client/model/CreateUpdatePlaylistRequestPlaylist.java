/*
 * SoundCloud Public API Specification
 * Discover and play over 320 million music tracks. Join the worldâ€™s largest online community of artists, bands, DJs, and audio creators.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CreateUpdatePlaylistRequestPlaylistTracksInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateUpdatePlaylistRequestPlaylist
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateUpdatePlaylistRequestPlaylist {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * public or private
   */
  @JsonAdapter(SharingEnum.Adapter.class)
 public enum SharingEnum {
    PUBLIC("public"),
    
    PRIVATE("private");

    private String value;

    SharingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SharingEnum fromValue(String value) {
      for (SharingEnum b : SharingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SharingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SharingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SharingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SharingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SHARING = "sharing";
  @SerializedName(SERIALIZED_NAME_SHARING)
  private SharingEnum sharing;

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private List<CreateUpdatePlaylistRequestPlaylistTracksInner> tracks = null;

  public static final String SERIALIZED_NAME_ARTWORK_DATA = "artwork_data";
  @SerializedName(SERIALIZED_NAME_ARTWORK_DATA)
  private File artworkData;

  public static final String SERIALIZED_NAME_EAN = "ean";
  @SerializedName(SERIALIZED_NAME_EAN)
  private String ean;

  public static final String SERIALIZED_NAME_GENRE = "genre";
  @SerializedName(SERIALIZED_NAME_GENRE)
  private String genre;

  public static final String SERIALIZED_NAME_LABEL_NAME = "label_name";
  @SerializedName(SERIALIZED_NAME_LABEL_NAME)
  private String labelName;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_PERMALINK = "permalink";
  @SerializedName(SERIALIZED_NAME_PERMALINK)
  private String permalink;

  public static final String SERIALIZED_NAME_PERMALINK_URL = "permalink_url";
  @SerializedName(SERIALIZED_NAME_PERMALINK_URL)
  private String permalinkUrl;

  public static final String SERIALIZED_NAME_PURCHASE_TITLE = "purchase_title";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TITLE)
  private String purchaseTitle;

  public static final String SERIALIZED_NAME_PURCHASE_URL = "purchase_url";
  @SerializedName(SERIALIZED_NAME_PURCHASE_URL)
  private String purchaseUrl;

  public static final String SERIALIZED_NAME_RELEASE = "release";
  @SerializedName(SERIALIZED_NAME_RELEASE)
  private String release;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "release_date";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private String releaseDate;

  /**
   * Playlist or album type
   */
  @JsonAdapter(SetTypeEnum.Adapter.class)
 public enum SetTypeEnum {
    ALBUM("album"),
    
    PLAYLIST("playlist");

    private String value;

    SetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SetTypeEnum fromValue(String value) {
      for (SetTypeEnum b : SetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SetTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SET_TYPE = "set_type";
  @SerializedName(SERIALIZED_NAME_SET_TYPE)
  private SetTypeEnum setType;

  public static final String SERIALIZED_NAME_TAG_LIST = "tag_list";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private String tagList;

  public CreateUpdatePlaylistRequestPlaylist() {
  }

  public CreateUpdatePlaylistRequestPlaylist title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Title of the playlist
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title of the playlist")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public CreateUpdatePlaylistRequestPlaylist description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of the playlist
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the playlist")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public CreateUpdatePlaylistRequestPlaylist sharing(SharingEnum sharing) {
    
    
    
    
    this.sharing = sharing;
    return this;
  }

   /**
   * public or private
   * @return sharing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "public or private")

  public SharingEnum getSharing() {
    return sharing;
  }


  public void setSharing(SharingEnum sharing) {
    
    
    
    this.sharing = sharing;
  }


  public CreateUpdatePlaylistRequestPlaylist tracks(List<CreateUpdatePlaylistRequestPlaylistTracksInner> tracks) {
    
    
    
    
    this.tracks = tracks;
    return this;
  }

  public CreateUpdatePlaylistRequestPlaylist addTracksItem(CreateUpdatePlaylistRequestPlaylistTracksInner tracksItem) {
    if (this.tracks == null) {
      this.tracks = new ArrayList<>();
    }
    this.tracks.add(tracksItem);
    return this;
  }

   /**
   * List of tracks to add to playlist
   * @return tracks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of tracks to add to playlist")

  public List<CreateUpdatePlaylistRequestPlaylistTracksInner> getTracks() {
    return tracks;
  }


  public void setTracks(List<CreateUpdatePlaylistRequestPlaylistTracksInner> tracks) {
    
    
    
    this.tracks = tracks;
  }


  public CreateUpdatePlaylistRequestPlaylist artworkData(File artworkData) {
    
    
    
    
    this.artworkData = artworkData;
    return this;
  }

   /**
   * Get artworkData
   * @return artworkData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public File getArtworkData() {
    return artworkData;
  }


  public void setArtworkData(File artworkData) {
    
    
    
    this.artworkData = artworkData;
  }


  public CreateUpdatePlaylistRequestPlaylist ean(String ean) {
    
    
    
    
    this.ean = ean;
    return this;
  }

   /**
   * The European Article Number
   * @return ean
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The European Article Number")

  public String getEan() {
    return ean;
  }


  public void setEan(String ean) {
    
    
    
    this.ean = ean;
  }


  public CreateUpdatePlaylistRequestPlaylist genre(String genre) {
    
    
    
    
    this.genre = genre;
    return this;
  }

   /**
   * Playlist&#39;s genre
   * @return genre
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist's genre")

  public String getGenre() {
    return genre;
  }


  public void setGenre(String genre) {
    
    
    
    this.genre = genre;
  }


  public CreateUpdatePlaylistRequestPlaylist labelName(String labelName) {
    
    
    
    
    this.labelName = labelName;
    return this;
  }

   /**
   * Label name
   * @return labelName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Label name")

  public String getLabelName() {
    return labelName;
  }


  public void setLabelName(String labelName) {
    
    
    
    this.labelName = labelName;
  }


  public CreateUpdatePlaylistRequestPlaylist license(String license) {
    
    
    
    
    this.license = license;
    return this;
  }

   /**
   * License number
   * @return license
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "License number")

  public String getLicense() {
    return license;
  }


  public void setLicense(String license) {
    
    
    
    this.license = license;
  }


  public CreateUpdatePlaylistRequestPlaylist permalink(String permalink) {
    
    
    
    
    this.permalink = permalink;
    return this;
  }

   /**
   * Playlist&#39;s permalink
   * @return permalink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist's permalink")

  public String getPermalink() {
    return permalink;
  }


  public void setPermalink(String permalink) {
    
    
    
    this.permalink = permalink;
  }


  public CreateUpdatePlaylistRequestPlaylist permalinkUrl(String permalinkUrl) {
    
    
    
    
    this.permalinkUrl = permalinkUrl;
    return this;
  }

   /**
   * Full permalink URL
   * @return permalinkUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Full permalink URL")

  public String getPermalinkUrl() {
    return permalinkUrl;
  }


  public void setPermalinkUrl(String permalinkUrl) {
    
    
    
    this.permalinkUrl = permalinkUrl;
  }


  public CreateUpdatePlaylistRequestPlaylist purchaseTitle(String purchaseTitle) {
    
    
    
    
    this.purchaseTitle = purchaseTitle;
    return this;
  }

   /**
   * Purchase title
   * @return purchaseTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase title")

  public String getPurchaseTitle() {
    return purchaseTitle;
  }


  public void setPurchaseTitle(String purchaseTitle) {
    
    
    
    this.purchaseTitle = purchaseTitle;
  }


  public CreateUpdatePlaylistRequestPlaylist purchaseUrl(String purchaseUrl) {
    
    
    
    
    this.purchaseUrl = purchaseUrl;
    return this;
  }

   /**
   * Purchase URL
   * @return purchaseUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Purchase URL")

  public String getPurchaseUrl() {
    return purchaseUrl;
  }


  public void setPurchaseUrl(String purchaseUrl) {
    
    
    
    this.purchaseUrl = purchaseUrl;
  }


  public CreateUpdatePlaylistRequestPlaylist release(String release) {
    
    
    
    
    this.release = release;
    return this;
  }

   /**
   * Playlist&#39;s release
   * @return release
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist's release")

  public String getRelease() {
    return release;
  }


  public void setRelease(String release) {
    
    
    
    this.release = release;
  }


  public CreateUpdatePlaylistRequestPlaylist releaseDate(String releaseDate) {
    
    
    
    
    this.releaseDate = releaseDate;
    return this;
  }

   /**
   * Release date
   * @return releaseDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Release date")

  public String getReleaseDate() {
    return releaseDate;
  }


  public void setReleaseDate(String releaseDate) {
    
    
    
    this.releaseDate = releaseDate;
  }


  public CreateUpdatePlaylistRequestPlaylist setType(SetTypeEnum setType) {
    
    
    
    
    this.setType = setType;
    return this;
  }

   /**
   * Playlist or album type
   * @return setType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Playlist or album type")

  public SetTypeEnum getSetType() {
    return setType;
  }


  public void setSetType(SetTypeEnum setType) {
    
    
    
    this.setType = setType;
  }


  public CreateUpdatePlaylistRequestPlaylist tagList(String tagList) {
    
    
    
    
    this.tagList = tagList;
    return this;
  }

   /**
   * A comma-separated list of tags
   * @return tagList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A comma-separated list of tags")

  public String getTagList() {
    return tagList;
  }


  public void setTagList(String tagList) {
    
    
    
    this.tagList = tagList;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateUpdatePlaylistRequestPlaylist instance itself
   */
  public CreateUpdatePlaylistRequestPlaylist putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUpdatePlaylistRequestPlaylist createUpdatePlaylistRequestPlaylist = (CreateUpdatePlaylistRequestPlaylist) o;
    return Objects.equals(this.title, createUpdatePlaylistRequestPlaylist.title) &&
        Objects.equals(this.description, createUpdatePlaylistRequestPlaylist.description) &&
        Objects.equals(this.sharing, createUpdatePlaylistRequestPlaylist.sharing) &&
        Objects.equals(this.tracks, createUpdatePlaylistRequestPlaylist.tracks) &&
        Objects.equals(this.artworkData, createUpdatePlaylistRequestPlaylist.artworkData) &&
        Objects.equals(this.ean, createUpdatePlaylistRequestPlaylist.ean) &&
        Objects.equals(this.genre, createUpdatePlaylistRequestPlaylist.genre) &&
        Objects.equals(this.labelName, createUpdatePlaylistRequestPlaylist.labelName) &&
        Objects.equals(this.license, createUpdatePlaylistRequestPlaylist.license) &&
        Objects.equals(this.permalink, createUpdatePlaylistRequestPlaylist.permalink) &&
        Objects.equals(this.permalinkUrl, createUpdatePlaylistRequestPlaylist.permalinkUrl) &&
        Objects.equals(this.purchaseTitle, createUpdatePlaylistRequestPlaylist.purchaseTitle) &&
        Objects.equals(this.purchaseUrl, createUpdatePlaylistRequestPlaylist.purchaseUrl) &&
        Objects.equals(this.release, createUpdatePlaylistRequestPlaylist.release) &&
        Objects.equals(this.releaseDate, createUpdatePlaylistRequestPlaylist.releaseDate) &&
        Objects.equals(this.setType, createUpdatePlaylistRequestPlaylist.setType) &&
        Objects.equals(this.tagList, createUpdatePlaylistRequestPlaylist.tagList)&&
        Objects.equals(this.additionalProperties, createUpdatePlaylistRequestPlaylist.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, sharing, tracks, artworkData, ean, genre, labelName, license, permalink, permalinkUrl, purchaseTitle, purchaseUrl, release, releaseDate, setType, tagList, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUpdatePlaylistRequestPlaylist {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sharing: ").append(toIndentedString(sharing)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("    artworkData: ").append(toIndentedString(artworkData)).append("\n");
    sb.append("    ean: ").append(toIndentedString(ean)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("    labelName: ").append(toIndentedString(labelName)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    permalink: ").append(toIndentedString(permalink)).append("\n");
    sb.append("    permalinkUrl: ").append(toIndentedString(permalinkUrl)).append("\n");
    sb.append("    purchaseTitle: ").append(toIndentedString(purchaseTitle)).append("\n");
    sb.append("    purchaseUrl: ").append(toIndentedString(purchaseUrl)).append("\n");
    sb.append("    release: ").append(toIndentedString(release)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    setType: ").append(toIndentedString(setType)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("sharing");
    openapiFields.add("tracks");
    openapiFields.add("artwork_data");
    openapiFields.add("ean");
    openapiFields.add("genre");
    openapiFields.add("label_name");
    openapiFields.add("license");
    openapiFields.add("permalink");
    openapiFields.add("permalink_url");
    openapiFields.add("purchase_title");
    openapiFields.add("purchase_url");
    openapiFields.add("release");
    openapiFields.add("release_date");
    openapiFields.add("set_type");
    openapiFields.add("tag_list");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateUpdatePlaylistRequestPlaylist
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateUpdatePlaylistRequestPlaylist.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateUpdatePlaylistRequestPlaylist is not found in the empty JSON string", CreateUpdatePlaylistRequestPlaylist.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("sharing") != null && !jsonObj.get("sharing").isJsonNull()) && !jsonObj.get("sharing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharing").toString()));
      }
      if (jsonObj.get("tracks") != null && !jsonObj.get("tracks").isJsonNull()) {
        JsonArray jsonArraytracks = jsonObj.getAsJsonArray("tracks");
        if (jsonArraytracks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracks` to be an array in the JSON string but got `%s`", jsonObj.get("tracks").toString()));
          }

          // validate the optional field `tracks` (array)
          for (int i = 0; i < jsonArraytracks.size(); i++) {
            CreateUpdatePlaylistRequestPlaylistTracksInner.validateJsonObject(jsonArraytracks.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("ean") != null && !jsonObj.get("ean").isJsonNull()) && !jsonObj.get("ean").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ean` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ean").toString()));
      }
      if ((jsonObj.get("genre") != null && !jsonObj.get("genre").isJsonNull()) && !jsonObj.get("genre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genre").toString()));
      }
      if ((jsonObj.get("label_name") != null && !jsonObj.get("label_name").isJsonNull()) && !jsonObj.get("label_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label_name").toString()));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("permalink") != null && !jsonObj.get("permalink").isJsonNull()) && !jsonObj.get("permalink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permalink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permalink").toString()));
      }
      if ((jsonObj.get("permalink_url") != null && !jsonObj.get("permalink_url").isJsonNull()) && !jsonObj.get("permalink_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permalink_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permalink_url").toString()));
      }
      if ((jsonObj.get("purchase_title") != null && !jsonObj.get("purchase_title").isJsonNull()) && !jsonObj.get("purchase_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_title").toString()));
      }
      if ((jsonObj.get("purchase_url") != null && !jsonObj.get("purchase_url").isJsonNull()) && !jsonObj.get("purchase_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchase_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchase_url").toString()));
      }
      if ((jsonObj.get("release") != null && !jsonObj.get("release").isJsonNull()) && !jsonObj.get("release").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release").toString()));
      }
      if ((jsonObj.get("release_date") != null && !jsonObj.get("release_date").isJsonNull()) && !jsonObj.get("release_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release_date").toString()));
      }
      if ((jsonObj.get("set_type") != null && !jsonObj.get("set_type").isJsonNull()) && !jsonObj.get("set_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `set_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("set_type").toString()));
      }
      if ((jsonObj.get("tag_list") != null && !jsonObj.get("tag_list").isJsonNull()) && !jsonObj.get("tag_list").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_list` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_list").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateUpdatePlaylistRequestPlaylist.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateUpdatePlaylistRequestPlaylist' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateUpdatePlaylistRequestPlaylist> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateUpdatePlaylistRequestPlaylist.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateUpdatePlaylistRequestPlaylist>() {
           @Override
           public void write(JsonWriter out, CreateUpdatePlaylistRequestPlaylist value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateUpdatePlaylistRequestPlaylist read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateUpdatePlaylistRequestPlaylist instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateUpdatePlaylistRequestPlaylist given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateUpdatePlaylistRequestPlaylist
  * @throws IOException if the JSON string is invalid with respect to CreateUpdatePlaylistRequestPlaylist
  */
  public static CreateUpdatePlaylistRequestPlaylist fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateUpdatePlaylistRequestPlaylist.class);
  }

 /**
  * Convert an instance of CreateUpdatePlaylistRequestPlaylist to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

